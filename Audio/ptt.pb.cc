// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ptt.proto
#include "stdafx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ptt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class UserDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<User>
     _instance;
} _User_default_instance_;
class GroupDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Group>
     _instance;
} _Group_default_instance_;
class ConfigureDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Configure>
     _instance;
} _Configure_default_instance_;
class ServerInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ServerInfo>
     _instance;
} _ServerInfo_default_instance_;
class LoginDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Login>
     _instance;
} _Login_default_instance_;
class LoginAckDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LoginAck>
     _instance;
} _LoginAck_default_instance_;
class QueryGroupDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryGroup>
     _instance;
} _QueryGroup_default_instance_;
class QueryGroupAckDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryGroupAck>
     _instance;
} _QueryGroupAck_default_instance_;
class QueryMembersDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryMembers>
     _instance;
} _QueryMembers_default_instance_;
class QueryMembersAck_GroupMembersDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryMembersAck_GroupMembers>
     _instance;
} _QueryMembersAck_GroupMembers_default_instance_;
class QueryMembersAckDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryMembersAck>
     _instance;
} _QueryMembersAck_default_instance_;
class JoinGroupDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<JoinGroup>
     _instance;
} _JoinGroup_default_instance_;
class JoinGroupAckDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<JoinGroupAck>
     _instance;
} _JoinGroupAck_default_instance_;
class LeaveGroupDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LeaveGroup>
     _instance;
} _LeaveGroup_default_instance_;
class LeaveGroupAckDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LeaveGroupAck>
     _instance;
} _LeaveGroupAck_default_instance_;
class RequestMicDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RequestMic>
     _instance;
} _RequestMic_default_instance_;
class RequestMicAckDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RequestMicAck>
     _instance;
} _RequestMicAck_default_instance_;
class ReleaseMicDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ReleaseMic>
     _instance;
} _ReleaseMic_default_instance_;
class ReleaseMicAckDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ReleaseMicAck>
     _instance;
} _ReleaseMicAck_default_instance_;
class CallDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Call>
     _instance;
} _Call_default_instance_;
class CallAckDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CallAck>
     _instance;
} _CallAck_default_instance_;
class TempCallArrivedDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TempCallArrived>
     _instance;
} _TempCallArrived_default_instance_;
class TempCallStatusDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TempCallStatus>
     _instance;
} _TempCallStatus_default_instance_;
class LogoutDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Logout>
     _instance;
} _Logout_default_instance_;
class LogoutAckDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LogoutAck>
     _instance;
} _LogoutAck_default_instance_;
class ReportLocationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ReportLocation>
     _instance;
} _ReportLocation_default_instance_;
class ReportLocationAckDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ReportLocationAck>
     _instance;
} _ReportLocationAck_default_instance_;
class PingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Ping>
     _instance;
} _Ping_default_instance_;
class PingAckDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PingAck>
     _instance;
} _PingAck_default_instance_;
class LostMicDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LostMic>
     _instance;
} _LostMic_default_instance_;
class KickoutDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Kickout>
     _instance;
} _Kickout_default_instance_;
class ReconfiguredDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Reconfigured>
     _instance;
} _Reconfigured_default_instance_;
class CurrentGroupDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CurrentGroup>
     _instance;
} _CurrentGroup_default_instance_;
class GroupListChangedDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GroupListChanged>
     _instance;
} _GroupListChanged_default_instance_;
class MemberGetMicDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MemberGetMic>
     _instance;
} _MemberGetMic_default_instance_;
class MemberLostMicDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MemberLostMic>
     _instance;
} _MemberLostMic_default_instance_;

namespace protobuf_ptt_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[36];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, usr_attri_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, gid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, n_members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, type_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configure, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configure, default_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configure, loc_report_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configure, audio_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configure, cfg_ptt_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configure, heart_inter_),
  0,
  1,
  4,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, port_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, platform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, meid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, expect_payload_),
  0,
  1,
  5,
  2,
  3,
  4,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAck, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAck, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAck, usr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAck, conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAck, tcp_server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAck, udp_server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAck, update_server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAck, cookie_),
  5,
  0,
  1,
  2,
  3,
  4,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGroup, detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGroup, include_temp_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGroupAck, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGroupAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGroupAck, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGroupAck, groups_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMembers, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMembers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMembers, gids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMembers, detail_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMembersAck_GroupMembers, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMembersAck_GroupMembers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMembersAck_GroupMembers, gid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMembersAck_GroupMembers, ingroups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMembersAck_GroupMembers, outgroups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMembersAck_GroupMembers, members_),
  0,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMembersAck, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMembersAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMembersAck, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMembersAck, members_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroup, gid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupAck, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupAck, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupAck, gid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGroup, gid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGroupAck, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGroupAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGroupAck, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGroupAck, gid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMic, gid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMic, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMic, payload_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMicAck, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMicAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMicAck, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMicAck, cookie_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseMic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseMic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseMic, gid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseMic, uid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseMicAck, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseMicAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseMicAck, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, uid_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallAck, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallAck, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallAck, uid_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempCallArrived, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempCallArrived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempCallArrived, call_name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempCallStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempCallStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempCallStatus, call_status_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logout, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutAck, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutAck, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportLocation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportLocation, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportLocation, latitude_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportLocationAck, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportLocationAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportLocationAck, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, timestamp_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingAck, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingAck, timestamp_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostMic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostMic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostMic, gid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LostMic, reason_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kickout, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kickout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kickout, reason_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reconfigured, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reconfigured, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reconfigured, conf_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentGroup, gid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentGroup, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentGroup, gname_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListChanged, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListChanged, update_groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupListChanged, rm_groups_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberGetMic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberGetMic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberGetMic, gid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberGetMic, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberGetMic, name_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberLostMic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberLostMic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberLostMic, gid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberLostMic, uid_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(User)},
  { 13, 22, sizeof(Group)},
  { 26, 36, sizeof(Configure)},
  { 41, 48, sizeof(ServerInfo)},
  { 50, 62, sizeof(Login)},
  { 69, 81, sizeof(LoginAck)},
  { 88, 95, sizeof(QueryGroup)},
  { 97, 104, sizeof(QueryGroupAck)},
  { 106, 113, sizeof(QueryMembers)},
  { 115, 124, sizeof(QueryMembersAck_GroupMembers)},
  { 128, 135, sizeof(QueryMembersAck)},
  { 137, 143, sizeof(JoinGroup)},
  { 144, 151, sizeof(JoinGroupAck)},
  { 153, 159, sizeof(LeaveGroup)},
  { 160, 167, sizeof(LeaveGroupAck)},
  { 169, 177, sizeof(RequestMic)},
  { 180, 187, sizeof(RequestMicAck)},
  { 189, 196, sizeof(ReleaseMic)},
  { 198, 204, sizeof(ReleaseMicAck)},
  { 205, 211, sizeof(Call)},
  { 212, 219, sizeof(CallAck)},
  { 221, 227, sizeof(TempCallArrived)},
  { 228, 234, sizeof(TempCallStatus)},
  { 235, 240, sizeof(Logout)},
  { 240, 246, sizeof(LogoutAck)},
  { 247, 254, sizeof(ReportLocation)},
  { 256, 262, sizeof(ReportLocationAck)},
  { 263, 269, sizeof(Ping)},
  { 270, 276, sizeof(PingAck)},
  { 277, 284, sizeof(LostMic)},
  { 286, 292, sizeof(Kickout)},
  { 293, 299, sizeof(Reconfigured)},
  { 300, 308, sizeof(CurrentGroup)},
  { 311, 318, sizeof(GroupListChanged)},
  { 320, 328, sizeof(MemberGetMic)},
  { 331, 338, sizeof(MemberLostMic)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_User_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Group_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Configure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Login_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryGroupAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryMembers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryMembersAck_GroupMembers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryMembersAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JoinGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JoinGroupAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LeaveGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LeaveGroupAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestMic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestMicAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReleaseMic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReleaseMicAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Call_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CallAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TempCallArrived_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TempCallStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Logout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogoutAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReportLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReportLocationAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PingAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LostMic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Kickout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Reconfigured_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CurrentGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GroupListChanged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemberGetMic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MemberLostMic_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ptt.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 36);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _User_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_User_default_instance_);_Group_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Group_default_instance_);_Configure_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Configure_default_instance_);_ServerInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ServerInfo_default_instance_);_Login_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Login_default_instance_);_LoginAck_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LoginAck_default_instance_);_QueryGroup_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryGroup_default_instance_);_QueryGroupAck_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryGroupAck_default_instance_);_QueryMembers_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryMembers_default_instance_);_QueryMembersAck_GroupMembers_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryMembersAck_GroupMembers_default_instance_);_QueryMembersAck_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryMembersAck_default_instance_);_JoinGroup_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_JoinGroup_default_instance_);_JoinGroupAck_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_JoinGroupAck_default_instance_);_LeaveGroup_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LeaveGroup_default_instance_);_LeaveGroupAck_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LeaveGroupAck_default_instance_);_RequestMic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RequestMic_default_instance_);_RequestMicAck_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RequestMicAck_default_instance_);_ReleaseMic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ReleaseMic_default_instance_);_ReleaseMicAck_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ReleaseMicAck_default_instance_);_Call_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Call_default_instance_);_CallAck_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CallAck_default_instance_);_TempCallArrived_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TempCallArrived_default_instance_);_TempCallStatus_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TempCallStatus_default_instance_);_Logout_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Logout_default_instance_);_LogoutAck_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LogoutAck_default_instance_);_ReportLocation_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ReportLocation_default_instance_);_ReportLocationAck_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ReportLocationAck_default_instance_);_Ping_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Ping_default_instance_);_PingAck_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PingAck_default_instance_);_LostMic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LostMic_default_instance_);_Kickout_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Kickout_default_instance_);_Reconfigured_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Reconfigured_default_instance_);_CurrentGroup_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CurrentGroup_default_instance_);_GroupListChanged_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GroupListChanged_default_instance_);_MemberGetMic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MemberGetMic_default_instance_);_MemberLostMic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MemberLostMic_default_instance_);_LoginAck_default_instance_._instance.get_mutable()->usr_ = const_cast< ::User*>(
      ::User::internal_default_instance());
  _LoginAck_default_instance_._instance.get_mutable()->conf_ = const_cast< ::Configure*>(
      ::Configure::internal_default_instance());
  _LoginAck_default_instance_._instance.get_mutable()->tcp_server_ = const_cast< ::ServerInfo*>(
      ::ServerInfo::internal_default_instance());
  _LoginAck_default_instance_._instance.get_mutable()->udp_server_ = const_cast< ::ServerInfo*>(
      ::ServerInfo::internal_default_instance());
  _LoginAck_default_instance_._instance.get_mutable()->update_server_ = const_cast< ::ServerInfo*>(
      ::ServerInfo::internal_default_instance());
  _Reconfigured_default_instance_._instance.get_mutable()->conf_ = const_cast< ::Configure*>(
      ::Configure::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tptt.proto\"D\n\004User\022\013\n\003uid\030\001 \002(\r\022\014\n\004name"
      "\030\002 \002(\t\022\016\n\006online\030\003 \001(\010\022\021\n\tusr_attri\030\004 \001("
      "\r\"\215\001\n\005Group\022\013\n\003gid\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\021"
      "\n\tn_members\030\003 \002(\r\022&\n\004type\030\004 \001(\0162\020.Group."
      "GroupType:\006STATIC\".\n\tGroupType\022\013\n\007BUILTI"
      "N\020\000\022\n\n\006STATIC\020\001\022\010\n\004TEMP\020\002\"\210\001\n\tConfigure\022"
      "\025\n\rdefault_group\030\001 \002(\r\022\031\n\021loc_report_per"
      "iod\030\002 \001(\r\022\033\n\raudio_enabled\030\003 \001(\010:\004true\022\027"
      "\n\017cfg_ptt_timeout\030\004 \001(\r\022\023\n\013heart_inter\030\005"
      " \001(\r\"+\n\nServerInfo\022\017\n\007address\030\001 \002(\t\022\014\n\004p"
      "ort\030\002 \002(\r\"\210\001\n\005Login\022\017\n\007account\030\001 \002(\t\022\020\n\010"
      "password\030\002 \001(\t\022\017\n\007version\030\003 \001(\005\022\020\n\010platf"
      "orm\030\004 \002(\t\022\016\n\006device\030\005 \002(\t\022\014\n\004meid\030\006 \001(\t\022"
      "\033\n\016expect_payload\030\007 \001(\r:\003101\"\276\001\n\010LoginAc"
      "k\022\016\n\006result\030\001 \002(\005\022\022\n\003usr\030\002 \002(\0132\005.User\022\030\n"
      "\004conf\030\003 \002(\0132\n.Configure\022\037\n\ntcp_server\030\004 "
      "\001(\0132\013.ServerInfo\022\037\n\nudp_server\030\005 \001(\0132\013.S"
      "erverInfo\022\"\n\rupdate_server\030\006 \001(\0132\013.Serve"
      "rInfo\022\016\n\006cookie\030\007 \001(\r\"\212\001\n\nQueryGroup\0223\n\006"
      "detail\030\001 \002(\0162\027.QueryGroup.DetailLevel:\nG"
      "ROUP_INFO\022\033\n\014include_temp\030\002 \001(\010:\005false\"*"
      "\n\013DetailLevel\022\013\n\007ONLY_ID\020\000\022\016\n\nGROUP_INFO"
      "\020\001\"7\n\rQueryGroupAck\022\016\n\006result\030\001 \002(\005\022\026\n\006g"
      "roups\030\002 \003(\0132\006.Group\"}\n\014QueryMembers\022\014\n\004g"
      "ids\030\001 \003(\r\0224\n\006detail\030\002 \001(\0162\031.QueryMembers"
      ".DetailLevel:\tUSER_INFO\")\n\013DetailLevel\022\013"
      "\n\007ONLY_ID\020\000\022\r\n\tUSER_INFO\020\001\"\253\001\n\017QueryMemb"
      "ersAck\022\016\n\006result\030\001 \002(\005\022.\n\007members\030\002 \003(\0132"
      "\035.QueryMembersAck.GroupMembers\032X\n\014GroupM"
      "embers\022\013\n\003gid\030\001 \002(\r\022\020\n\010ingroups\030\002 \003(\r\022\021\n"
      "\toutgroups\030\003 \003(\r\022\026\n\007members\030\004 \003(\0132\005.User"
      "\"\030\n\tJoinGroup\022\013\n\003gid\030\001 \002(\r\"+\n\014JoinGroupA"
      "ck\022\016\n\006result\030\001 \002(\005\022\013\n\003gid\030\002 \001(\r\"\031\n\nLeave"
      "Group\022\013\n\003gid\030\001 \001(\r\",\n\rLeaveGroupAck\022\016\n\006r"
      "esult\030\001 \002(\005\022\013\n\003gid\030\002 \001(\r\"7\n\nRequestMic\022\013"
      "\n\003gid\030\001 \001(\r\022\013\n\003uid\030\002 \001(\r\022\017\n\007payload\030\003 \001("
      "\r\"/\n\rRequestMicAck\022\016\n\006result\030\001 \002(\005\022\016\n\006co"
      "okie\030\002 \001(\r\"&\n\nReleaseMic\022\013\n\003gid\030\001 \001(\r\022\013\n"
      "\003uid\030\002 \001(\r\"\037\n\rReleaseMicAck\022\016\n\006result\030\001 "
      "\002(\005\"\023\n\004Call\022\013\n\003uid\030\001 \003(\r\"&\n\007CallAck\022\016\n\006r"
      "esult\030\001 \002(\005\022\013\n\003uid\030\002 \003(\r\"$\n\017TempCallArri"
      "ved\022\021\n\tcall_name\030\001 \002(\t\"%\n\016TempCallStatus"
      "\022\023\n\013call_status\030\001 \002(\r\"\010\n\006Logout\"\033\n\tLogou"
      "tAck\022\016\n\006result\030\001 \002(\005\"5\n\016ReportLocation\022\021"
      "\n\tlongitude\030\001 \002(\001\022\020\n\010latitude\030\002 \002(\001\"#\n\021R"
      "eportLocationAck\022\016\n\006result\030\001 \002(\005\"\031\n\004Ping"
      "\022\021\n\ttimestamp\030\001 \001(\r\"\034\n\007PingAck\022\021\n\ttimest"
      "amp\030\001 \001(\r\"&\n\007LostMic\022\013\n\003gid\030\001 \002(\r\022\016\n\006rea"
      "son\030\002 \002(\t\"\031\n\007Kickout\022\016\n\006reason\030\001 \002(\t\"(\n\014"
      "Reconfigured\022\030\n\004conf\030\001 \002(\0132\n.Configure\":"
      "\n\014CurrentGroup\022\013\n\003gid\030\001 \002(\r\022\016\n\006reason\030\002 "
      "\002(\t\022\r\n\005gname\030\003 \002(\t\"D\n\020GroupListChanged\022\035"
      "\n\rupdate_groups\030\001 \003(\0132\006.Group\022\021\n\trm_grou"
      "ps\030\002 \003(\r\"6\n\014MemberGetMic\022\013\n\003gid\030\001 \002(\r\022\013\n"
      "\003uid\030\002 \002(\r\022\014\n\004name\030\003 \001(\t\")\n\rMemberLostMi"
      "c\022\013\n\003gid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ptt.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_ptt_2eproto

const ::google::protobuf::EnumDescriptor* Group_GroupType_descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_enum_descriptors[0];
}
bool Group_GroupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Group_GroupType Group::BUILTIN;
const Group_GroupType Group::STATIC;
const Group_GroupType Group::TEMP;
const Group_GroupType Group::GroupType_MIN;
const Group_GroupType Group::GroupType_MAX;
const int Group::GroupType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* QueryGroup_DetailLevel_descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_enum_descriptors[1];
}
bool QueryGroup_DetailLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const QueryGroup_DetailLevel QueryGroup::ONLY_ID;
const QueryGroup_DetailLevel QueryGroup::GROUP_INFO;
const QueryGroup_DetailLevel QueryGroup::DetailLevel_MIN;
const QueryGroup_DetailLevel QueryGroup::DetailLevel_MAX;
const int QueryGroup::DetailLevel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* QueryMembers_DetailLevel_descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_enum_descriptors[2];
}
bool QueryMembers_DetailLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const QueryMembers_DetailLevel QueryMembers::ONLY_ID;
const QueryMembers_DetailLevel QueryMembers::USER_INFO;
const QueryMembers_DetailLevel QueryMembers::DetailLevel_MIN;
const QueryMembers_DetailLevel QueryMembers::DetailLevel_MAX;
const int QueryMembers::DetailLevel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User::kUidFieldNumber;
const int User::kNameFieldNumber;
const int User::kOnlineFieldNumber;
const int User::kUsrAttriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User::User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:User)
}
User::User(const User& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&usr_attri_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(usr_attri_));
  // @@protoc_insertion_point(copy_constructor:User)
}

void User::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usr_attri_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(usr_attri_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:User)
  SharedDtor();
}

void User::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const User& User::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

User* User::New(::google::protobuf::Arena* arena) const {
  User* n = new User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usr_attri_) -
        reinterpret_cast<char*>(&uid_)) + sizeof(usr_attri_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "User.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool online = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 usr_attri = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_usr_attri();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usr_attri_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "User.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bool online = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->online(), output);
  }

  // optional uint32 usr_attri = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->usr_attri(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User)
}

::google::protobuf::uint8* User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "User.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool online = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->online(), target);
  }

  // optional uint32 usr_attri = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->usr_attri(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User)
  return target;
}

size_t User::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:User)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_uid()) {
    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  return total_size;
}
size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:User)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint32 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional bool online = 3;
    if (has_online()) {
      total_size += 1 + 1;
    }

    // optional uint32 usr_attri = 4;
    if (has_usr_attri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usr_attri());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:User)
  GOOGLE_DCHECK_NE(&from, this);
  const User* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:User)
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      online_ = from.online_;
    }
    if (cached_has_bits & 0x00000008u) {
      usr_attri_ = from.usr_attri_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void User::Swap(User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User::InternalSwap(User* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(uid_, other->uid_);
  swap(online_, other->online_);
  swap(usr_attri_, other->usr_attri_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// User

// required uint32 uid = 1;
bool User::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void User::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
void User::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
void User::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 User::uid() const {
  // @@protoc_insertion_point(field_get:User.uid)
  return uid_;
}
void User::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:User.uid)
}

// required string name = 2;
bool User::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void User::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void User::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void User::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& User::name() const {
  // @@protoc_insertion_point(field_get:User.name)
  return name_.GetNoArena();
}
void User::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:User.name)
}
#if LANG_CXX11
void User::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:User.name)
}
#endif
void User::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:User.name)
}
void User::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:User.name)
}
::std::string* User::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:User.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:User.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:User.name)
}

// optional bool online = 3;
bool User::has_online() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void User::set_has_online() {
  _has_bits_[0] |= 0x00000004u;
}
void User::clear_has_online() {
  _has_bits_[0] &= ~0x00000004u;
}
void User::clear_online() {
  online_ = false;
  clear_has_online();
}
bool User::online() const {
  // @@protoc_insertion_point(field_get:User.online)
  return online_;
}
void User::set_online(bool value) {
  set_has_online();
  online_ = value;
  // @@protoc_insertion_point(field_set:User.online)
}

// optional uint32 usr_attri = 4;
bool User::has_usr_attri() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void User::set_has_usr_attri() {
  _has_bits_[0] |= 0x00000008u;
}
void User::clear_has_usr_attri() {
  _has_bits_[0] &= ~0x00000008u;
}
void User::clear_usr_attri() {
  usr_attri_ = 0u;
  clear_has_usr_attri();
}
::google::protobuf::uint32 User::usr_attri() const {
  // @@protoc_insertion_point(field_get:User.usr_attri)
  return usr_attri_;
}
void User::set_usr_attri(::google::protobuf::uint32 value) {
  set_has_usr_attri();
  usr_attri_ = value;
  // @@protoc_insertion_point(field_set:User.usr_attri)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Group::kGidFieldNumber;
const int Group::kNameFieldNumber;
const int Group::kNMembersFieldNumber;
const int Group::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Group::Group()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Group)
}
Group::Group(const Group& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&gid_, &from.gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&gid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Group)
}

void Group::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_members_) -
      reinterpret_cast<char*>(&gid_)) + sizeof(n_members_));
  type_ = 1;
}

Group::~Group() {
  // @@protoc_insertion_point(destructor:Group)
  SharedDtor();
}

void Group::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Group::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Group& Group::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

Group* Group::New(::google::protobuf::Arena* arena) const {
  Group* n = new Group;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Group::Clear() {
// @@protoc_insertion_point(message_clear_start:Group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&n_members_) -
        reinterpret_cast<char*>(&gid_)) + sizeof(n_members_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Group)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_gid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Group.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 n_members = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_n_members();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Group.GroupType type = 4 [default = STATIC];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Group_GroupType_IsValid(value)) {
            set_type(static_cast< ::Group_GroupType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Group)
  return false;
#undef DO_
}

void Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gid(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Group.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required uint32 n_members = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->n_members(), output);
  }

  // optional .Group.GroupType type = 4 [default = STATIC];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Group)
}

::google::protobuf::uint8* Group::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gid(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Group.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 n_members = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->n_members(), target);
  }

  // optional .Group.GroupType type = 4 [default = STATIC];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Group)
  return target;
}

size_t Group::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Group)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_gid()) {
    // required uint32 gid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gid());
  }

  if (has_n_members()) {
    // required uint32 n_members = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n_members());
  }

  return total_size;
}
size_t Group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Group)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint32 gid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gid());

    // required uint32 n_members = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n_members());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .Group.GroupType type = 4 [default = STATIC];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Group::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Group)
  GOOGLE_DCHECK_NE(&from, this);
  const Group* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Group>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Group)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Group)
    MergeFrom(*source);
  }
}

void Group::MergeFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Group)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      gid_ = from.gid_;
    }
    if (cached_has_bits & 0x00000004u) {
      n_members_ = from.n_members_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Group::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Group::CopyFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Group::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Group::Swap(Group* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Group::InternalSwap(Group* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(gid_, other->gid_);
  swap(n_members_, other->n_members_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Group::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Group

// required uint32 gid = 1;
bool Group::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Group::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
void Group::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
void Group::clear_gid() {
  gid_ = 0u;
  clear_has_gid();
}
::google::protobuf::uint32 Group::gid() const {
  // @@protoc_insertion_point(field_get:Group.gid)
  return gid_;
}
void Group::set_gid(::google::protobuf::uint32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:Group.gid)
}

// required string name = 2;
bool Group::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Group::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Group::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Group::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Group::name() const {
  // @@protoc_insertion_point(field_get:Group.name)
  return name_.GetNoArena();
}
void Group::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Group.name)
}
#if LANG_CXX11
void Group::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Group.name)
}
#endif
void Group::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Group.name)
}
void Group::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Group.name)
}
::std::string* Group::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Group.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Group::release_name() {
  // @@protoc_insertion_point(field_release:Group.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Group::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Group.name)
}

// required uint32 n_members = 3;
bool Group::has_n_members() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Group::set_has_n_members() {
  _has_bits_[0] |= 0x00000004u;
}
void Group::clear_has_n_members() {
  _has_bits_[0] &= ~0x00000004u;
}
void Group::clear_n_members() {
  n_members_ = 0u;
  clear_has_n_members();
}
::google::protobuf::uint32 Group::n_members() const {
  // @@protoc_insertion_point(field_get:Group.n_members)
  return n_members_;
}
void Group::set_n_members(::google::protobuf::uint32 value) {
  set_has_n_members();
  n_members_ = value;
  // @@protoc_insertion_point(field_set:Group.n_members)
}

// optional .Group.GroupType type = 4 [default = STATIC];
bool Group::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Group::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void Group::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void Group::clear_type() {
  type_ = 1;
  clear_has_type();
}
::Group_GroupType Group::type() const {
  // @@protoc_insertion_point(field_get:Group.type)
  return static_cast< ::Group_GroupType >(type_);
}
void Group::set_type(::Group_GroupType value) {
  assert(::Group_GroupType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Group.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Configure::kDefaultGroupFieldNumber;
const int Configure::kLocReportPeriodFieldNumber;
const int Configure::kAudioEnabledFieldNumber;
const int Configure::kCfgPttTimeoutFieldNumber;
const int Configure::kHeartInterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Configure::Configure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Configure)
}
Configure::Configure(const Configure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&default_group_, &from.default_group_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_enabled_) -
    reinterpret_cast<char*>(&default_group_)) + sizeof(audio_enabled_));
  // @@protoc_insertion_point(copy_constructor:Configure)
}

void Configure::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&default_group_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heart_inter_) -
      reinterpret_cast<char*>(&default_group_)) + sizeof(heart_inter_));
  audio_enabled_ = true;
}

Configure::~Configure() {
  // @@protoc_insertion_point(destructor:Configure)
  SharedDtor();
}

void Configure::SharedDtor() {
}

void Configure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Configure::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Configure& Configure::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

Configure* Configure::New(::google::protobuf::Arena* arena) const {
  Configure* n = new Configure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Configure::Clear() {
// @@protoc_insertion_point(message_clear_start:Configure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&default_group_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heart_inter_) -
        reinterpret_cast<char*>(&default_group_)) + sizeof(heart_inter_));
    audio_enabled_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Configure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Configure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 default_group = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_default_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 loc_report_period = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_loc_report_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loc_report_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool audio_enabled = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_audio_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &audio_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cfg_ptt_timeout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_cfg_ptt_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfg_ptt_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 heart_inter = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_heart_inter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heart_inter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Configure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Configure)
  return false;
#undef DO_
}

void Configure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Configure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 default_group = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->default_group(), output);
  }

  // optional uint32 loc_report_period = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->loc_report_period(), output);
  }

  // optional bool audio_enabled = 3 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->audio_enabled(), output);
  }

  // optional uint32 cfg_ptt_timeout = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cfg_ptt_timeout(), output);
  }

  // optional uint32 heart_inter = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->heart_inter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Configure)
}

::google::protobuf::uint8* Configure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Configure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 default_group = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->default_group(), target);
  }

  // optional uint32 loc_report_period = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->loc_report_period(), target);
  }

  // optional bool audio_enabled = 3 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->audio_enabled(), target);
  }

  // optional uint32 cfg_ptt_timeout = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cfg_ptt_timeout(), target);
  }

  // optional uint32 heart_inter = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->heart_inter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Configure)
  return target;
}

size_t Configure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Configure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 default_group = 1;
  if (has_default_group()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->default_group());
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional uint32 loc_report_period = 2;
    if (has_loc_report_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loc_report_period());
    }

    // optional uint32 cfg_ptt_timeout = 4;
    if (has_cfg_ptt_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfg_ptt_timeout());
    }

    // optional uint32 heart_inter = 5;
    if (has_heart_inter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heart_inter());
    }

    // optional bool audio_enabled = 3 [default = true];
    if (has_audio_enabled()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Configure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Configure)
  GOOGLE_DCHECK_NE(&from, this);
  const Configure* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Configure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Configure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Configure)
    MergeFrom(*source);
  }
}

void Configure::MergeFrom(const Configure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Configure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      default_group_ = from.default_group_;
    }
    if (cached_has_bits & 0x00000002u) {
      loc_report_period_ = from.loc_report_period_;
    }
    if (cached_has_bits & 0x00000004u) {
      cfg_ptt_timeout_ = from.cfg_ptt_timeout_;
    }
    if (cached_has_bits & 0x00000008u) {
      heart_inter_ = from.heart_inter_;
    }
    if (cached_has_bits & 0x00000010u) {
      audio_enabled_ = from.audio_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Configure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Configure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Configure::CopyFrom(const Configure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Configure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configure::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Configure::Swap(Configure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Configure::InternalSwap(Configure* other) {
  using std::swap;
  swap(default_group_, other->default_group_);
  swap(loc_report_period_, other->loc_report_period_);
  swap(cfg_ptt_timeout_, other->cfg_ptt_timeout_);
  swap(heart_inter_, other->heart_inter_);
  swap(audio_enabled_, other->audio_enabled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Configure::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Configure

// required uint32 default_group = 1;
bool Configure::has_default_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Configure::set_has_default_group() {
  _has_bits_[0] |= 0x00000001u;
}
void Configure::clear_has_default_group() {
  _has_bits_[0] &= ~0x00000001u;
}
void Configure::clear_default_group() {
  default_group_ = 0u;
  clear_has_default_group();
}
::google::protobuf::uint32 Configure::default_group() const {
  // @@protoc_insertion_point(field_get:Configure.default_group)
  return default_group_;
}
void Configure::set_default_group(::google::protobuf::uint32 value) {
  set_has_default_group();
  default_group_ = value;
  // @@protoc_insertion_point(field_set:Configure.default_group)
}

// optional uint32 loc_report_period = 2;
bool Configure::has_loc_report_period() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Configure::set_has_loc_report_period() {
  _has_bits_[0] |= 0x00000002u;
}
void Configure::clear_has_loc_report_period() {
  _has_bits_[0] &= ~0x00000002u;
}
void Configure::clear_loc_report_period() {
  loc_report_period_ = 0u;
  clear_has_loc_report_period();
}
::google::protobuf::uint32 Configure::loc_report_period() const {
  // @@protoc_insertion_point(field_get:Configure.loc_report_period)
  return loc_report_period_;
}
void Configure::set_loc_report_period(::google::protobuf::uint32 value) {
  set_has_loc_report_period();
  loc_report_period_ = value;
  // @@protoc_insertion_point(field_set:Configure.loc_report_period)
}

// optional bool audio_enabled = 3 [default = true];
bool Configure::has_audio_enabled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Configure::set_has_audio_enabled() {
  _has_bits_[0] |= 0x00000010u;
}
void Configure::clear_has_audio_enabled() {
  _has_bits_[0] &= ~0x00000010u;
}
void Configure::clear_audio_enabled() {
  audio_enabled_ = true;
  clear_has_audio_enabled();
}
bool Configure::audio_enabled() const {
  // @@protoc_insertion_point(field_get:Configure.audio_enabled)
  return audio_enabled_;
}
void Configure::set_audio_enabled(bool value) {
  set_has_audio_enabled();
  audio_enabled_ = value;
  // @@protoc_insertion_point(field_set:Configure.audio_enabled)
}

// optional uint32 cfg_ptt_timeout = 4;
bool Configure::has_cfg_ptt_timeout() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Configure::set_has_cfg_ptt_timeout() {
  _has_bits_[0] |= 0x00000004u;
}
void Configure::clear_has_cfg_ptt_timeout() {
  _has_bits_[0] &= ~0x00000004u;
}
void Configure::clear_cfg_ptt_timeout() {
  cfg_ptt_timeout_ = 0u;
  clear_has_cfg_ptt_timeout();
}
::google::protobuf::uint32 Configure::cfg_ptt_timeout() const {
  // @@protoc_insertion_point(field_get:Configure.cfg_ptt_timeout)
  return cfg_ptt_timeout_;
}
void Configure::set_cfg_ptt_timeout(::google::protobuf::uint32 value) {
  set_has_cfg_ptt_timeout();
  cfg_ptt_timeout_ = value;
  // @@protoc_insertion_point(field_set:Configure.cfg_ptt_timeout)
}

// optional uint32 heart_inter = 5;
bool Configure::has_heart_inter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Configure::set_has_heart_inter() {
  _has_bits_[0] |= 0x00000008u;
}
void Configure::clear_has_heart_inter() {
  _has_bits_[0] &= ~0x00000008u;
}
void Configure::clear_heart_inter() {
  heart_inter_ = 0u;
  clear_has_heart_inter();
}
::google::protobuf::uint32 Configure::heart_inter() const {
  // @@protoc_insertion_point(field_get:Configure.heart_inter)
  return heart_inter_;
}
void Configure::set_heart_inter(::google::protobuf::uint32 value) {
  set_has_heart_inter();
  heart_inter_ = value;
  // @@protoc_insertion_point(field_set:Configure.heart_inter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerInfo::kAddressFieldNumber;
const int ServerInfo::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerInfo::ServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerInfo)
}
ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:ServerInfo)
}

void ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:ServerInfo)
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerInfo& ServerInfo::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerInfo* ServerInfo::New(::google::protobuf::Arena* arena) const {
  ServerInfo* n = new ServerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_address()) {
    GOOGLE_DCHECK(!address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*address_.UnsafeRawStringPointer())->clear();
  }
  port_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ServerInfo.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerInfo)
  return false;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ServerInfo.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // required uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerInfo)
}

::google::protobuf::uint8* ServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ServerInfo.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // required uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerInfo)
  return target;
}

size_t ServerInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ServerInfo)
  size_t total_size = 0;

  if (has_address()) {
    // required string address = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  if (has_port()) {
    // required uint32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  return total_size;
}
size_t ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string address = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());

    // required uint32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerInfo)
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerInfo::InternalSwap(ServerInfo* other) {
  using std::swap;
  address_.Swap(&other->address_);
  swap(port_, other->port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerInfo

// required string address = 1;
bool ServerInfo::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerInfo::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerInfo::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
const ::std::string& ServerInfo::address() const {
  // @@protoc_insertion_point(field_get:ServerInfo.address)
  return address_.GetNoArena();
}
void ServerInfo::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerInfo.address)
}
#if LANG_CXX11
void ServerInfo::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerInfo.address)
}
#endif
void ServerInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerInfo.address)
}
void ServerInfo::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerInfo.address)
}
::std::string* ServerInfo::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:ServerInfo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServerInfo::release_address() {
  // @@protoc_insertion_point(field_release:ServerInfo.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerInfo::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:ServerInfo.address)
}

// required uint32 port = 2;
bool ServerInfo::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerInfo::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerInfo::clear_port() {
  port_ = 0u;
  clear_has_port();
}
::google::protobuf::uint32 ServerInfo::port() const {
  // @@protoc_insertion_point(field_get:ServerInfo.port)
  return port_;
}
void ServerInfo::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:ServerInfo.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Login::kAccountFieldNumber;
const int Login::kPasswordFieldNumber;
const int Login::kVersionFieldNumber;
const int Login::kPlatformFieldNumber;
const int Login::kDeviceFieldNumber;
const int Login::kMeidFieldNumber;
const int Login::kExpectPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Login::Login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Login)
}
Login::Login(const Login& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_platform()) {
    platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
  }
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device()) {
    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  meid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_meid()) {
    meid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meid_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&expect_payload_) -
    reinterpret_cast<char*>(&version_)) + sizeof(expect_payload_));
  // @@protoc_insertion_point(copy_constructor:Login)
}

void Login::SharedCtor() {
  _cached_size_ = 0;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  expect_payload_ = 101u;
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:Login)
  SharedDtor();
}

void Login::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Login& Login::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

Login* Login::New(::google::protobuf::Arena* arena) const {
  Login* n = new Login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Login::Clear() {
// @@protoc_insertion_point(message_clear_start:Login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!account_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*account_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!platform_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*platform_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!device_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!meid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*meid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 96u) {
    version_ = 0;
    expect_payload_ = 101u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Login.account");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Login.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string platform = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), static_cast<int>(this->platform().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Login.platform");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string device = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device().data(), static_cast<int>(this->device().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Login.device");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string meid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->meid().data(), static_cast<int>(this->meid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Login.meid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 expect_payload = 7 [default = 101];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_expect_payload();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expect_payload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Login)
  return false;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string account = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Login.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Login.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional int32 version = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->version(), output);
  }

  // required string platform = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), static_cast<int>(this->platform().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Login.platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->platform(), output);
  }

  // required string device = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), static_cast<int>(this->device().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Login.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->device(), output);
  }

  // optional string meid = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meid().data(), static_cast<int>(this->meid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Login.meid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->meid(), output);
  }

  // optional uint32 expect_payload = 7 [default = 101];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->expect_payload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Login)
}

::google::protobuf::uint8* Login::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string account = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Login.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Login.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional int32 version = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->version(), target);
  }

  // required string platform = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), static_cast<int>(this->platform().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Login.platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->platform(), target);
  }

  // required string device = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), static_cast<int>(this->device().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Login.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->device(), target);
  }

  // optional string meid = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meid().data(), static_cast<int>(this->meid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Login.meid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->meid(), target);
  }

  // optional uint32 expect_payload = 7 [default = 101];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->expect_payload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Login)
  return target;
}

size_t Login::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Login)
  size_t total_size = 0;

  if (has_account()) {
    // required string account = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  if (has_platform()) {
    // required string platform = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->platform());
  }

  if (has_device()) {
    // required string device = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }

  return total_size;
}
size_t Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Login)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string account = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());

    // required string platform = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->platform());

    // required string device = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string password = 2;
  if (has_password()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  if (_has_bits_[0 / 32] & 112u) {
    // optional string meid = 6;
    if (has_meid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meid());
    }

    // optional int32 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional uint32 expect_payload = 7 [default = 101];
    if (has_expect_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expect_payload());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Login)
  GOOGLE_DCHECK_NE(&from, this);
  const Login* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Login>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Login)
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_platform();
      platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_device();
      device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_meid();
      meid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meid_);
    }
    if (cached_has_bits & 0x00000020u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000040u) {
      expect_payload_ = from.expect_payload_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  return true;
}

void Login::Swap(Login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Login::InternalSwap(Login* other) {
  using std::swap;
  account_.Swap(&other->account_);
  password_.Swap(&other->password_);
  platform_.Swap(&other->platform_);
  device_.Swap(&other->device_);
  meid_.Swap(&other->meid_);
  swap(version_, other->version_);
  swap(expect_payload_, other->expect_payload_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Login

// required string account = 1;
bool Login::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Login::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
void Login::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
void Login::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
const ::std::string& Login::account() const {
  // @@protoc_insertion_point(field_get:Login.account)
  return account_.GetNoArena();
}
void Login::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.account)
}
#if LANG_CXX11
void Login::set_account(::std::string&& value) {
  set_has_account();
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login.account)
}
#endif
void Login::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.account)
}
void Login::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.account)
}
::std::string* Login::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:Login.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Login::release_account() {
  // @@protoc_insertion_point(field_release:Login.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Login::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Login.account)
}

// optional string password = 2;
bool Login::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Login::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void Login::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void Login::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& Login::password() const {
  // @@protoc_insertion_point(field_get:Login.password)
  return password_.GetNoArena();
}
void Login::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.password)
}
#if LANG_CXX11
void Login::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login.password)
}
#endif
void Login::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.password)
}
void Login::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.password)
}
::std::string* Login::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:Login.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Login::release_password() {
  // @@protoc_insertion_point(field_release:Login.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Login::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Login.password)
}

// optional int32 version = 3;
bool Login::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Login::set_has_version() {
  _has_bits_[0] |= 0x00000020u;
}
void Login::clear_has_version() {
  _has_bits_[0] &= ~0x00000020u;
}
void Login::clear_version() {
  version_ = 0;
  clear_has_version();
}
::google::protobuf::int32 Login::version() const {
  // @@protoc_insertion_point(field_get:Login.version)
  return version_;
}
void Login::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Login.version)
}

// required string platform = 4;
bool Login::has_platform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Login::set_has_platform() {
  _has_bits_[0] |= 0x00000004u;
}
void Login::clear_has_platform() {
  _has_bits_[0] &= ~0x00000004u;
}
void Login::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform();
}
const ::std::string& Login::platform() const {
  // @@protoc_insertion_point(field_get:Login.platform)
  return platform_.GetNoArena();
}
void Login::set_platform(const ::std::string& value) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.platform)
}
#if LANG_CXX11
void Login::set_platform(::std::string&& value) {
  set_has_platform();
  platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login.platform)
}
#endif
void Login::set_platform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.platform)
}
void Login::set_platform(const char* value, size_t size) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.platform)
}
::std::string* Login::mutable_platform() {
  set_has_platform();
  // @@protoc_insertion_point(field_mutable:Login.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Login::release_platform() {
  // @@protoc_insertion_point(field_release:Login.platform)
  clear_has_platform();
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Login::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    set_has_platform();
  } else {
    clear_has_platform();
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:Login.platform)
}

// required string device = 5;
bool Login::has_device() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Login::set_has_device() {
  _has_bits_[0] |= 0x00000008u;
}
void Login::clear_has_device() {
  _has_bits_[0] &= ~0x00000008u;
}
void Login::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device();
}
const ::std::string& Login::device() const {
  // @@protoc_insertion_point(field_get:Login.device)
  return device_.GetNoArena();
}
void Login::set_device(const ::std::string& value) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.device)
}
#if LANG_CXX11
void Login::set_device(::std::string&& value) {
  set_has_device();
  device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login.device)
}
#endif
void Login::set_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.device)
}
void Login::set_device(const char* value, size_t size) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.device)
}
::std::string* Login::mutable_device() {
  set_has_device();
  // @@protoc_insertion_point(field_mutable:Login.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Login::release_device() {
  // @@protoc_insertion_point(field_release:Login.device)
  clear_has_device();
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Login::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    set_has_device();
  } else {
    clear_has_device();
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:Login.device)
}

// optional string meid = 6;
bool Login::has_meid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Login::set_has_meid() {
  _has_bits_[0] |= 0x00000010u;
}
void Login::clear_has_meid() {
  _has_bits_[0] &= ~0x00000010u;
}
void Login::clear_meid() {
  meid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_meid();
}
const ::std::string& Login::meid() const {
  // @@protoc_insertion_point(field_get:Login.meid)
  return meid_.GetNoArena();
}
void Login::set_meid(const ::std::string& value) {
  set_has_meid();
  meid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.meid)
}
#if LANG_CXX11
void Login::set_meid(::std::string&& value) {
  set_has_meid();
  meid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login.meid)
}
#endif
void Login::set_meid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_meid();
  meid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.meid)
}
void Login::set_meid(const char* value, size_t size) {
  set_has_meid();
  meid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.meid)
}
::std::string* Login::mutable_meid() {
  set_has_meid();
  // @@protoc_insertion_point(field_mutable:Login.meid)
  return meid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Login::release_meid() {
  // @@protoc_insertion_point(field_release:Login.meid)
  clear_has_meid();
  return meid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Login::set_allocated_meid(::std::string* meid) {
  if (meid != NULL) {
    set_has_meid();
  } else {
    clear_has_meid();
  }
  meid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meid);
  // @@protoc_insertion_point(field_set_allocated:Login.meid)
}

// optional uint32 expect_payload = 7 [default = 101];
bool Login::has_expect_payload() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Login::set_has_expect_payload() {
  _has_bits_[0] |= 0x00000040u;
}
void Login::clear_has_expect_payload() {
  _has_bits_[0] &= ~0x00000040u;
}
void Login::clear_expect_payload() {
  expect_payload_ = 101u;
  clear_has_expect_payload();
}
::google::protobuf::uint32 Login::expect_payload() const {
  // @@protoc_insertion_point(field_get:Login.expect_payload)
  return expect_payload_;
}
void Login::set_expect_payload(::google::protobuf::uint32 value) {
  set_has_expect_payload();
  expect_payload_ = value;
  // @@protoc_insertion_point(field_set:Login.expect_payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginAck::kResultFieldNumber;
const int LoginAck::kUsrFieldNumber;
const int LoginAck::kConfFieldNumber;
const int LoginAck::kTcpServerFieldNumber;
const int LoginAck::kUdpServerFieldNumber;
const int LoginAck::kUpdateServerFieldNumber;
const int LoginAck::kCookieFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginAck::LoginAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginAck)
}
LoginAck::LoginAck(const LoginAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_usr()) {
    usr_ = new ::User(*from.usr_);
  } else {
    usr_ = NULL;
  }
  if (from.has_conf()) {
    conf_ = new ::Configure(*from.conf_);
  } else {
    conf_ = NULL;
  }
  if (from.has_tcp_server()) {
    tcp_server_ = new ::ServerInfo(*from.tcp_server_);
  } else {
    tcp_server_ = NULL;
  }
  if (from.has_udp_server()) {
    udp_server_ = new ::ServerInfo(*from.udp_server_);
  } else {
    udp_server_ = NULL;
  }
  if (from.has_update_server()) {
    update_server_ = new ::ServerInfo(*from.update_server_);
  } else {
    update_server_ = NULL;
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&cookie_) -
    reinterpret_cast<char*>(&result_)) + sizeof(cookie_));
  // @@protoc_insertion_point(copy_constructor:LoginAck)
}

void LoginAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&usr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cookie_) -
      reinterpret_cast<char*>(&usr_)) + sizeof(cookie_));
}

LoginAck::~LoginAck() {
  // @@protoc_insertion_point(destructor:LoginAck)
  SharedDtor();
}

void LoginAck::SharedDtor() {
  if (this != internal_default_instance()) delete usr_;
  if (this != internal_default_instance()) delete conf_;
  if (this != internal_default_instance()) delete tcp_server_;
  if (this != internal_default_instance()) delete udp_server_;
  if (this != internal_default_instance()) delete update_server_;
}

void LoginAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginAck::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginAck& LoginAck::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginAck* LoginAck::New(::google::protobuf::Arena* arena) const {
  LoginAck* n = new LoginAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginAck::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(usr_ != NULL);
      usr_->::User::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(conf_ != NULL);
      conf_->::Configure::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tcp_server_ != NULL);
      tcp_server_->::ServerInfo::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(udp_server_ != NULL);
      udp_server_->::ServerInfo::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(update_server_ != NULL);
      update_server_->::ServerInfo::Clear();
    }
  }
  if (cached_has_bits & 96u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cookie_) -
        reinterpret_cast<char*>(&result_)) + sizeof(cookie_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .User usr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Configure conf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ServerInfo tcp_server = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tcp_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ServerInfo udp_server = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_udp_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ServerInfo update_server = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cookie = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_cookie();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginAck)
  return false;
#undef DO_
}

void LoginAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required .User usr = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->usr_, output);
  }

  // required .Configure conf = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->conf_, output);
  }

  // optional .ServerInfo tcp_server = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->tcp_server_, output);
  }

  // optional .ServerInfo udp_server = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->udp_server_, output);
  }

  // optional .ServerInfo update_server = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->update_server_, output);
  }

  // optional uint32 cookie = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cookie(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LoginAck)
}

::google::protobuf::uint8* LoginAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LoginAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required .User usr = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->usr_, deterministic, target);
  }

  // required .Configure conf = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->conf_, deterministic, target);
  }

  // optional .ServerInfo tcp_server = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->tcp_server_, deterministic, target);
  }

  // optional .ServerInfo udp_server = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->udp_server_, deterministic, target);
  }

  // optional .ServerInfo update_server = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->update_server_, deterministic, target);
  }

  // optional uint32 cookie = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cookie(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginAck)
  return target;
}

size_t LoginAck::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LoginAck)
  size_t total_size = 0;

  if (has_usr()) {
    // required .User usr = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->usr_);
  }

  if (has_conf()) {
    // required .Configure conf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->conf_);
  }

  if (has_result()) {
    // required int32 result = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  return total_size;
}
size_t LoginAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000023) ^ 0x00000023) == 0) {  // All required fields are present.
    // required .User usr = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->usr_);

    // required .Configure conf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->conf_);

    // required int32 result = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 28u) {
    // optional .ServerInfo tcp_server = 4;
    if (has_tcp_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tcp_server_);
    }

    // optional .ServerInfo udp_server = 5;
    if (has_udp_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->udp_server_);
    }

    // optional .ServerInfo update_server = 6;
    if (has_update_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_server_);
    }

  }
  // optional uint32 cookie = 7;
  if (has_cookie()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cookie());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginAck)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginAck)
    MergeFrom(*source);
  }
}

void LoginAck::MergeFrom(const LoginAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_usr()->::User::MergeFrom(from.usr());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_conf()->::Configure::MergeFrom(from.conf());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_tcp_server()->::ServerInfo::MergeFrom(from.tcp_server());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_udp_server()->::ServerInfo::MergeFrom(from.udp_server());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_update_server()->::ServerInfo::MergeFrom(from.update_server());
    }
    if (cached_has_bits & 0x00000020u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000040u) {
      cookie_ = from.cookie_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoginAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAck::CopyFrom(const LoginAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;
  if (has_usr()) {
    if (!this->usr_->IsInitialized()) return false;
  }
  if (has_conf()) {
    if (!this->conf_->IsInitialized()) return false;
  }
  if (has_tcp_server()) {
    if (!this->tcp_server_->IsInitialized()) return false;
  }
  if (has_udp_server()) {
    if (!this->udp_server_->IsInitialized()) return false;
  }
  if (has_update_server()) {
    if (!this->update_server_->IsInitialized()) return false;
  }
  return true;
}

void LoginAck::Swap(LoginAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginAck::InternalSwap(LoginAck* other) {
  using std::swap;
  swap(usr_, other->usr_);
  swap(conf_, other->conf_);
  swap(tcp_server_, other->tcp_server_);
  swap(udp_server_, other->udp_server_);
  swap(update_server_, other->update_server_);
  swap(result_, other->result_);
  swap(cookie_, other->cookie_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginAck::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginAck

// required int32 result = 1;
bool LoginAck::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LoginAck::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
void LoginAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
void LoginAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 LoginAck::result() const {
  // @@protoc_insertion_point(field_get:LoginAck.result)
  return result_;
}
void LoginAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:LoginAck.result)
}

// required .User usr = 2;
bool LoginAck::has_usr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginAck::set_has_usr() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginAck::clear_has_usr() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginAck::clear_usr() {
  if (usr_ != NULL) usr_->::User::Clear();
  clear_has_usr();
}
const ::User& LoginAck::usr() const {
  const ::User* p = usr_;
  // @@protoc_insertion_point(field_get:LoginAck.usr)
  return p != NULL ? *p : *reinterpret_cast<const ::User*>(
      &::_User_default_instance_);
}
::User* LoginAck::mutable_usr() {
  set_has_usr();
  if (usr_ == NULL) {
    usr_ = new ::User;
  }
  // @@protoc_insertion_point(field_mutable:LoginAck.usr)
  return usr_;
}
::User* LoginAck::release_usr() {
  // @@protoc_insertion_point(field_release:LoginAck.usr)
  clear_has_usr();
  ::User* temp = usr_;
  usr_ = NULL;
  return temp;
}
void LoginAck::set_allocated_usr(::User* usr) {
  delete usr_;
  usr_ = usr;
  if (usr) {
    set_has_usr();
  } else {
    clear_has_usr();
  }
  // @@protoc_insertion_point(field_set_allocated:LoginAck.usr)
}

// required .Configure conf = 3;
bool LoginAck::has_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginAck::set_has_conf() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginAck::clear_has_conf() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginAck::clear_conf() {
  if (conf_ != NULL) conf_->::Configure::Clear();
  clear_has_conf();
}
const ::Configure& LoginAck::conf() const {
  const ::Configure* p = conf_;
  // @@protoc_insertion_point(field_get:LoginAck.conf)
  return p != NULL ? *p : *reinterpret_cast<const ::Configure*>(
      &::_Configure_default_instance_);
}
::Configure* LoginAck::mutable_conf() {
  set_has_conf();
  if (conf_ == NULL) {
    conf_ = new ::Configure;
  }
  // @@protoc_insertion_point(field_mutable:LoginAck.conf)
  return conf_;
}
::Configure* LoginAck::release_conf() {
  // @@protoc_insertion_point(field_release:LoginAck.conf)
  clear_has_conf();
  ::Configure* temp = conf_;
  conf_ = NULL;
  return temp;
}
void LoginAck::set_allocated_conf(::Configure* conf) {
  delete conf_;
  conf_ = conf;
  if (conf) {
    set_has_conf();
  } else {
    clear_has_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:LoginAck.conf)
}

// optional .ServerInfo tcp_server = 4;
bool LoginAck::has_tcp_server() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoginAck::set_has_tcp_server() {
  _has_bits_[0] |= 0x00000004u;
}
void LoginAck::clear_has_tcp_server() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoginAck::clear_tcp_server() {
  if (tcp_server_ != NULL) tcp_server_->::ServerInfo::Clear();
  clear_has_tcp_server();
}
const ::ServerInfo& LoginAck::tcp_server() const {
  const ::ServerInfo* p = tcp_server_;
  // @@protoc_insertion_point(field_get:LoginAck.tcp_server)
  return p != NULL ? *p : *reinterpret_cast<const ::ServerInfo*>(
      &::_ServerInfo_default_instance_);
}
::ServerInfo* LoginAck::mutable_tcp_server() {
  set_has_tcp_server();
  if (tcp_server_ == NULL) {
    tcp_server_ = new ::ServerInfo;
  }
  // @@protoc_insertion_point(field_mutable:LoginAck.tcp_server)
  return tcp_server_;
}
::ServerInfo* LoginAck::release_tcp_server() {
  // @@protoc_insertion_point(field_release:LoginAck.tcp_server)
  clear_has_tcp_server();
  ::ServerInfo* temp = tcp_server_;
  tcp_server_ = NULL;
  return temp;
}
void LoginAck::set_allocated_tcp_server(::ServerInfo* tcp_server) {
  delete tcp_server_;
  tcp_server_ = tcp_server;
  if (tcp_server) {
    set_has_tcp_server();
  } else {
    clear_has_tcp_server();
  }
  // @@protoc_insertion_point(field_set_allocated:LoginAck.tcp_server)
}

// optional .ServerInfo udp_server = 5;
bool LoginAck::has_udp_server() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LoginAck::set_has_udp_server() {
  _has_bits_[0] |= 0x00000008u;
}
void LoginAck::clear_has_udp_server() {
  _has_bits_[0] &= ~0x00000008u;
}
void LoginAck::clear_udp_server() {
  if (udp_server_ != NULL) udp_server_->::ServerInfo::Clear();
  clear_has_udp_server();
}
const ::ServerInfo& LoginAck::udp_server() const {
  const ::ServerInfo* p = udp_server_;
  // @@protoc_insertion_point(field_get:LoginAck.udp_server)
  return p != NULL ? *p : *reinterpret_cast<const ::ServerInfo*>(
      &::_ServerInfo_default_instance_);
}
::ServerInfo* LoginAck::mutable_udp_server() {
  set_has_udp_server();
  if (udp_server_ == NULL) {
    udp_server_ = new ::ServerInfo;
  }
  // @@protoc_insertion_point(field_mutable:LoginAck.udp_server)
  return udp_server_;
}
::ServerInfo* LoginAck::release_udp_server() {
  // @@protoc_insertion_point(field_release:LoginAck.udp_server)
  clear_has_udp_server();
  ::ServerInfo* temp = udp_server_;
  udp_server_ = NULL;
  return temp;
}
void LoginAck::set_allocated_udp_server(::ServerInfo* udp_server) {
  delete udp_server_;
  udp_server_ = udp_server;
  if (udp_server) {
    set_has_udp_server();
  } else {
    clear_has_udp_server();
  }
  // @@protoc_insertion_point(field_set_allocated:LoginAck.udp_server)
}

// optional .ServerInfo update_server = 6;
bool LoginAck::has_update_server() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LoginAck::set_has_update_server() {
  _has_bits_[0] |= 0x00000010u;
}
void LoginAck::clear_has_update_server() {
  _has_bits_[0] &= ~0x00000010u;
}
void LoginAck::clear_update_server() {
  if (update_server_ != NULL) update_server_->::ServerInfo::Clear();
  clear_has_update_server();
}
const ::ServerInfo& LoginAck::update_server() const {
  const ::ServerInfo* p = update_server_;
  // @@protoc_insertion_point(field_get:LoginAck.update_server)
  return p != NULL ? *p : *reinterpret_cast<const ::ServerInfo*>(
      &::_ServerInfo_default_instance_);
}
::ServerInfo* LoginAck::mutable_update_server() {
  set_has_update_server();
  if (update_server_ == NULL) {
    update_server_ = new ::ServerInfo;
  }
  // @@protoc_insertion_point(field_mutable:LoginAck.update_server)
  return update_server_;
}
::ServerInfo* LoginAck::release_update_server() {
  // @@protoc_insertion_point(field_release:LoginAck.update_server)
  clear_has_update_server();
  ::ServerInfo* temp = update_server_;
  update_server_ = NULL;
  return temp;
}
void LoginAck::set_allocated_update_server(::ServerInfo* update_server) {
  delete update_server_;
  update_server_ = update_server;
  if (update_server) {
    set_has_update_server();
  } else {
    clear_has_update_server();
  }
  // @@protoc_insertion_point(field_set_allocated:LoginAck.update_server)
}

// optional uint32 cookie = 7;
bool LoginAck::has_cookie() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LoginAck::set_has_cookie() {
  _has_bits_[0] |= 0x00000040u;
}
void LoginAck::clear_has_cookie() {
  _has_bits_[0] &= ~0x00000040u;
}
void LoginAck::clear_cookie() {
  cookie_ = 0u;
  clear_has_cookie();
}
::google::protobuf::uint32 LoginAck::cookie() const {
  // @@protoc_insertion_point(field_get:LoginAck.cookie)
  return cookie_;
}
void LoginAck::set_cookie(::google::protobuf::uint32 value) {
  set_has_cookie();
  cookie_ = value;
  // @@protoc_insertion_point(field_set:LoginAck.cookie)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryGroup::kDetailFieldNumber;
const int QueryGroup::kIncludeTempFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryGroup::QueryGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:QueryGroup)
}
QueryGroup::QueryGroup(const QueryGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&include_temp_, &from.include_temp_,
    static_cast<size_t>(reinterpret_cast<char*>(&detail_) -
    reinterpret_cast<char*>(&include_temp_)) + sizeof(detail_));
  // @@protoc_insertion_point(copy_constructor:QueryGroup)
}

void QueryGroup::SharedCtor() {
  _cached_size_ = 0;
  include_temp_ = false;
  detail_ = 1;
}

QueryGroup::~QueryGroup() {
  // @@protoc_insertion_point(destructor:QueryGroup)
  SharedDtor();
}

void QueryGroup::SharedDtor() {
}

void QueryGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryGroup::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryGroup& QueryGroup::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryGroup* QueryGroup::New(::google::protobuf::Arena* arena) const {
  QueryGroup* n = new QueryGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:QueryGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    include_temp_ = false;
    detail_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QueryGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QueryGroup.DetailLevel detail = 1 [default = GROUP_INFO];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::QueryGroup_DetailLevel_IsValid(value)) {
            set_detail(static_cast< ::QueryGroup_DetailLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_temp = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_include_temp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_temp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QueryGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QueryGroup)
  return false;
#undef DO_
}

void QueryGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QueryGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .QueryGroup.DetailLevel detail = 1 [default = GROUP_INFO];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->detail(), output);
  }

  // optional bool include_temp = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->include_temp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QueryGroup)
}

::google::protobuf::uint8* QueryGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:QueryGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .QueryGroup.DetailLevel detail = 1 [default = GROUP_INFO];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->detail(), target);
  }

  // optional bool include_temp = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->include_temp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QueryGroup)
  return target;
}

size_t QueryGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QueryGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .QueryGroup.DetailLevel detail = 1 [default = GROUP_INFO];
  if (has_detail()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->detail());
  }
  // optional bool include_temp = 2 [default = false];
  if (has_include_temp()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QueryGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QueryGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QueryGroup)
    MergeFrom(*source);
  }
}

void QueryGroup::MergeFrom(const QueryGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QueryGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      include_temp_ = from.include_temp_;
    }
    if (cached_has_bits & 0x00000002u) {
      detail_ = from.detail_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QueryGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QueryGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryGroup::CopyFrom(const QueryGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QueryGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void QueryGroup::Swap(QueryGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryGroup::InternalSwap(QueryGroup* other) {
  using std::swap;
  swap(include_temp_, other->include_temp_);
  swap(detail_, other->detail_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryGroup::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryGroup

// required .QueryGroup.DetailLevel detail = 1 [default = GROUP_INFO];
bool QueryGroup::has_detail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryGroup::set_has_detail() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryGroup::clear_has_detail() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryGroup::clear_detail() {
  detail_ = 1;
  clear_has_detail();
}
::QueryGroup_DetailLevel QueryGroup::detail() const {
  // @@protoc_insertion_point(field_get:QueryGroup.detail)
  return static_cast< ::QueryGroup_DetailLevel >(detail_);
}
void QueryGroup::set_detail(::QueryGroup_DetailLevel value) {
  assert(::QueryGroup_DetailLevel_IsValid(value));
  set_has_detail();
  detail_ = value;
  // @@protoc_insertion_point(field_set:QueryGroup.detail)
}

// optional bool include_temp = 2 [default = false];
bool QueryGroup::has_include_temp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryGroup::set_has_include_temp() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryGroup::clear_has_include_temp() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryGroup::clear_include_temp() {
  include_temp_ = false;
  clear_has_include_temp();
}
bool QueryGroup::include_temp() const {
  // @@protoc_insertion_point(field_get:QueryGroup.include_temp)
  return include_temp_;
}
void QueryGroup::set_include_temp(bool value) {
  set_has_include_temp();
  include_temp_ = value;
  // @@protoc_insertion_point(field_set:QueryGroup.include_temp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryGroupAck::kResultFieldNumber;
const int QueryGroupAck::kGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryGroupAck::QueryGroupAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:QueryGroupAck)
}
QueryGroupAck::QueryGroupAck(const QueryGroupAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:QueryGroupAck)
}

void QueryGroupAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

QueryGroupAck::~QueryGroupAck() {
  // @@protoc_insertion_point(destructor:QueryGroupAck)
  SharedDtor();
}

void QueryGroupAck::SharedDtor() {
}

void QueryGroupAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryGroupAck::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryGroupAck& QueryGroupAck::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryGroupAck* QueryGroupAck::New(::google::protobuf::Arena* arena) const {
  QueryGroupAck* n = new QueryGroupAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryGroupAck::Clear() {
// @@protoc_insertion_point(message_clear_start:QueryGroupAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryGroupAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QueryGroupAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Group groups = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QueryGroupAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QueryGroupAck)
  return false;
#undef DO_
}

void QueryGroupAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QueryGroupAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .Group groups = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->groups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->groups(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QueryGroupAck)
}

::google::protobuf::uint8* QueryGroupAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:QueryGroupAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .Group groups = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->groups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->groups(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QueryGroupAck)
  return target;
}

size_t QueryGroupAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QueryGroupAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated .Group groups = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groups(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryGroupAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QueryGroupAck)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryGroupAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryGroupAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QueryGroupAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QueryGroupAck)
    MergeFrom(*source);
  }
}

void QueryGroupAck::MergeFrom(const QueryGroupAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QueryGroupAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void QueryGroupAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QueryGroupAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryGroupAck::CopyFrom(const QueryGroupAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QueryGroupAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGroupAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->groups())) return false;
  return true;
}

void QueryGroupAck::Swap(QueryGroupAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryGroupAck::InternalSwap(QueryGroupAck* other) {
  using std::swap;
  groups_.InternalSwap(&other->groups_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryGroupAck::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryGroupAck

// required int32 result = 1;
bool QueryGroupAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryGroupAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryGroupAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryGroupAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 QueryGroupAck::result() const {
  // @@protoc_insertion_point(field_get:QueryGroupAck.result)
  return result_;
}
void QueryGroupAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:QueryGroupAck.result)
}

// repeated .Group groups = 2;
int QueryGroupAck::groups_size() const {
  return groups_.size();
}
void QueryGroupAck::clear_groups() {
  groups_.Clear();
}
const ::Group& QueryGroupAck::groups(int index) const {
  // @@protoc_insertion_point(field_get:QueryGroupAck.groups)
  return groups_.Get(index);
}
::Group* QueryGroupAck::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:QueryGroupAck.groups)
  return groups_.Mutable(index);
}
::Group* QueryGroupAck::add_groups() {
  // @@protoc_insertion_point(field_add:QueryGroupAck.groups)
  return groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::Group >*
QueryGroupAck::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:QueryGroupAck.groups)
  return &groups_;
}
const ::google::protobuf::RepeatedPtrField< ::Group >&
QueryGroupAck::groups() const {
  // @@protoc_insertion_point(field_list:QueryGroupAck.groups)
  return groups_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryMembers::kGidsFieldNumber;
const int QueryMembers::kDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryMembers::QueryMembers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:QueryMembers)
}
QueryMembers::QueryMembers(const QueryMembers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      gids_(from.gids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detail_ = from.detail_;
  // @@protoc_insertion_point(copy_constructor:QueryMembers)
}

void QueryMembers::SharedCtor() {
  _cached_size_ = 0;
  detail_ = 1;
}

QueryMembers::~QueryMembers() {
  // @@protoc_insertion_point(destructor:QueryMembers)
  SharedDtor();
}

void QueryMembers::SharedDtor() {
}

void QueryMembers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryMembers::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryMembers& QueryMembers::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryMembers* QueryMembers::New(::google::protobuf::Arena* arena) const {
  QueryMembers* n = new QueryMembers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryMembers::Clear() {
// @@protoc_insertion_point(message_clear_start:QueryMembers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gids_.Clear();
  detail_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryMembers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QueryMembers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 gids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_gids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .QueryMembers.DetailLevel detail = 2 [default = USER_INFO];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::QueryMembers_DetailLevel_IsValid(value)) {
            set_detail(static_cast< ::QueryMembers_DetailLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QueryMembers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QueryMembers)
  return false;
#undef DO_
}

void QueryMembers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QueryMembers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 gids = 1;
  for (int i = 0, n = this->gids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->gids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .QueryMembers.DetailLevel detail = 2 [default = USER_INFO];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->detail(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QueryMembers)
}

::google::protobuf::uint8* QueryMembers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:QueryMembers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 gids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->gids_, target);

  cached_has_bits = _has_bits_[0];
  // optional .QueryMembers.DetailLevel detail = 2 [default = USER_INFO];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->detail(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QueryMembers)
  return target;
}

size_t QueryMembers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QueryMembers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 gids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->gids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->gids_size());
    total_size += data_size;
  }

  // optional .QueryMembers.DetailLevel detail = 2 [default = USER_INFO];
  if (has_detail()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->detail());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryMembers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QueryMembers)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryMembers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryMembers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QueryMembers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QueryMembers)
    MergeFrom(*source);
  }
}

void QueryMembers::MergeFrom(const QueryMembers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QueryMembers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gids_.MergeFrom(from.gids_);
  if (from.has_detail()) {
    set_detail(from.detail());
  }
}

void QueryMembers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QueryMembers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMembers::CopyFrom(const QueryMembers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QueryMembers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMembers::IsInitialized() const {
  return true;
}

void QueryMembers::Swap(QueryMembers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryMembers::InternalSwap(QueryMembers* other) {
  using std::swap;
  gids_.InternalSwap(&other->gids_);
  swap(detail_, other->detail_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryMembers::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryMembers

// repeated uint32 gids = 1;
int QueryMembers::gids_size() const {
  return gids_.size();
}
void QueryMembers::clear_gids() {
  gids_.Clear();
}
::google::protobuf::uint32 QueryMembers::gids(int index) const {
  // @@protoc_insertion_point(field_get:QueryMembers.gids)
  return gids_.Get(index);
}
void QueryMembers::set_gids(int index, ::google::protobuf::uint32 value) {
  gids_.Set(index, value);
  // @@protoc_insertion_point(field_set:QueryMembers.gids)
}
void QueryMembers::add_gids(::google::protobuf::uint32 value) {
  gids_.Add(value);
  // @@protoc_insertion_point(field_add:QueryMembers.gids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
QueryMembers::gids() const {
  // @@protoc_insertion_point(field_list:QueryMembers.gids)
  return gids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
QueryMembers::mutable_gids() {
  // @@protoc_insertion_point(field_mutable_list:QueryMembers.gids)
  return &gids_;
}

// optional .QueryMembers.DetailLevel detail = 2 [default = USER_INFO];
bool QueryMembers::has_detail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryMembers::set_has_detail() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryMembers::clear_has_detail() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryMembers::clear_detail() {
  detail_ = 1;
  clear_has_detail();
}
::QueryMembers_DetailLevel QueryMembers::detail() const {
  // @@protoc_insertion_point(field_get:QueryMembers.detail)
  return static_cast< ::QueryMembers_DetailLevel >(detail_);
}
void QueryMembers::set_detail(::QueryMembers_DetailLevel value) {
  assert(::QueryMembers_DetailLevel_IsValid(value));
  set_has_detail();
  detail_ = value;
  // @@protoc_insertion_point(field_set:QueryMembers.detail)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryMembersAck_GroupMembers::kGidFieldNumber;
const int QueryMembersAck_GroupMembers::kIngroupsFieldNumber;
const int QueryMembersAck_GroupMembers::kOutgroupsFieldNumber;
const int QueryMembersAck_GroupMembers::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryMembersAck_GroupMembers::QueryMembersAck_GroupMembers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:QueryMembersAck.GroupMembers)
}
QueryMembersAck_GroupMembers::QueryMembersAck_GroupMembers(const QueryMembersAck_GroupMembers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ingroups_(from.ingroups_),
      outgroups_(from.outgroups_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gid_ = from.gid_;
  // @@protoc_insertion_point(copy_constructor:QueryMembersAck.GroupMembers)
}

void QueryMembersAck_GroupMembers::SharedCtor() {
  _cached_size_ = 0;
  gid_ = 0u;
}

QueryMembersAck_GroupMembers::~QueryMembersAck_GroupMembers() {
  // @@protoc_insertion_point(destructor:QueryMembersAck.GroupMembers)
  SharedDtor();
}

void QueryMembersAck_GroupMembers::SharedDtor() {
}

void QueryMembersAck_GroupMembers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryMembersAck_GroupMembers::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryMembersAck_GroupMembers& QueryMembersAck_GroupMembers::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryMembersAck_GroupMembers* QueryMembersAck_GroupMembers::New(::google::protobuf::Arena* arena) const {
  QueryMembersAck_GroupMembers* n = new QueryMembersAck_GroupMembers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryMembersAck_GroupMembers::Clear() {
// @@protoc_insertion_point(message_clear_start:QueryMembersAck.GroupMembers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ingroups_.Clear();
  outgroups_.Clear();
  members_.Clear();
  gid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryMembersAck_GroupMembers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QueryMembersAck.GroupMembers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_gid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ingroups = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_ingroups())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ingroups())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 outgroups = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_outgroups())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_outgroups())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .User members = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QueryMembersAck.GroupMembers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QueryMembersAck.GroupMembers)
  return false;
#undef DO_
}

void QueryMembersAck_GroupMembers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QueryMembersAck.GroupMembers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gid(), output);
  }

  // repeated uint32 ingroups = 2;
  for (int i = 0, n = this->ingroups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->ingroups(i), output);
  }

  // repeated uint32 outgroups = 3;
  for (int i = 0, n = this->outgroups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->outgroups(i), output);
  }

  // repeated .User members = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->members(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QueryMembersAck.GroupMembers)
}

::google::protobuf::uint8* QueryMembersAck_GroupMembers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:QueryMembersAck.GroupMembers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gid(), target);
  }

  // repeated uint32 ingroups = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->ingroups_, target);

  // repeated uint32 outgroups = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->outgroups_, target);

  // repeated .User members = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->members(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QueryMembersAck.GroupMembers)
  return target;
}

size_t QueryMembersAck_GroupMembers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QueryMembersAck.GroupMembers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 gid = 1;
  if (has_gid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gid());
  }
  // repeated uint32 ingroups = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ingroups_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ingroups_size());
    total_size += data_size;
  }

  // repeated uint32 outgroups = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->outgroups_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->outgroups_size());
    total_size += data_size;
  }

  // repeated .User members = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryMembersAck_GroupMembers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QueryMembersAck.GroupMembers)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryMembersAck_GroupMembers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryMembersAck_GroupMembers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QueryMembersAck.GroupMembers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QueryMembersAck.GroupMembers)
    MergeFrom(*source);
  }
}

void QueryMembersAck_GroupMembers::MergeFrom(const QueryMembersAck_GroupMembers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QueryMembersAck.GroupMembers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ingroups_.MergeFrom(from.ingroups_);
  outgroups_.MergeFrom(from.outgroups_);
  members_.MergeFrom(from.members_);
  if (from.has_gid()) {
    set_gid(from.gid());
  }
}

void QueryMembersAck_GroupMembers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QueryMembersAck.GroupMembers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMembersAck_GroupMembers::CopyFrom(const QueryMembersAck_GroupMembers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QueryMembersAck.GroupMembers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMembersAck_GroupMembers::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->members())) return false;
  return true;
}

void QueryMembersAck_GroupMembers::Swap(QueryMembersAck_GroupMembers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryMembersAck_GroupMembers::InternalSwap(QueryMembersAck_GroupMembers* other) {
  using std::swap;
  ingroups_.InternalSwap(&other->ingroups_);
  outgroups_.InternalSwap(&other->outgroups_);
  members_.InternalSwap(&other->members_);
  swap(gid_, other->gid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryMembersAck_GroupMembers::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryMembersAck_GroupMembers

// required uint32 gid = 1;
bool QueryMembersAck_GroupMembers::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryMembersAck_GroupMembers::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryMembersAck_GroupMembers::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryMembersAck_GroupMembers::clear_gid() {
  gid_ = 0u;
  clear_has_gid();
}
::google::protobuf::uint32 QueryMembersAck_GroupMembers::gid() const {
  // @@protoc_insertion_point(field_get:QueryMembersAck.GroupMembers.gid)
  return gid_;
}
void QueryMembersAck_GroupMembers::set_gid(::google::protobuf::uint32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:QueryMembersAck.GroupMembers.gid)
}

// repeated uint32 ingroups = 2;
int QueryMembersAck_GroupMembers::ingroups_size() const {
  return ingroups_.size();
}
void QueryMembersAck_GroupMembers::clear_ingroups() {
  ingroups_.Clear();
}
::google::protobuf::uint32 QueryMembersAck_GroupMembers::ingroups(int index) const {
  // @@protoc_insertion_point(field_get:QueryMembersAck.GroupMembers.ingroups)
  return ingroups_.Get(index);
}
void QueryMembersAck_GroupMembers::set_ingroups(int index, ::google::protobuf::uint32 value) {
  ingroups_.Set(index, value);
  // @@protoc_insertion_point(field_set:QueryMembersAck.GroupMembers.ingroups)
}
void QueryMembersAck_GroupMembers::add_ingroups(::google::protobuf::uint32 value) {
  ingroups_.Add(value);
  // @@protoc_insertion_point(field_add:QueryMembersAck.GroupMembers.ingroups)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
QueryMembersAck_GroupMembers::ingroups() const {
  // @@protoc_insertion_point(field_list:QueryMembersAck.GroupMembers.ingroups)
  return ingroups_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
QueryMembersAck_GroupMembers::mutable_ingroups() {
  // @@protoc_insertion_point(field_mutable_list:QueryMembersAck.GroupMembers.ingroups)
  return &ingroups_;
}

// repeated uint32 outgroups = 3;
int QueryMembersAck_GroupMembers::outgroups_size() const {
  return outgroups_.size();
}
void QueryMembersAck_GroupMembers::clear_outgroups() {
  outgroups_.Clear();
}
::google::protobuf::uint32 QueryMembersAck_GroupMembers::outgroups(int index) const {
  // @@protoc_insertion_point(field_get:QueryMembersAck.GroupMembers.outgroups)
  return outgroups_.Get(index);
}
void QueryMembersAck_GroupMembers::set_outgroups(int index, ::google::protobuf::uint32 value) {
  outgroups_.Set(index, value);
  // @@protoc_insertion_point(field_set:QueryMembersAck.GroupMembers.outgroups)
}
void QueryMembersAck_GroupMembers::add_outgroups(::google::protobuf::uint32 value) {
  outgroups_.Add(value);
  // @@protoc_insertion_point(field_add:QueryMembersAck.GroupMembers.outgroups)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
QueryMembersAck_GroupMembers::outgroups() const {
  // @@protoc_insertion_point(field_list:QueryMembersAck.GroupMembers.outgroups)
  return outgroups_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
QueryMembersAck_GroupMembers::mutable_outgroups() {
  // @@protoc_insertion_point(field_mutable_list:QueryMembersAck.GroupMembers.outgroups)
  return &outgroups_;
}

// repeated .User members = 4;
int QueryMembersAck_GroupMembers::members_size() const {
  return members_.size();
}
void QueryMembersAck_GroupMembers::clear_members() {
  members_.Clear();
}
const ::User& QueryMembersAck_GroupMembers::members(int index) const {
  // @@protoc_insertion_point(field_get:QueryMembersAck.GroupMembers.members)
  return members_.Get(index);
}
::User* QueryMembersAck_GroupMembers::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:QueryMembersAck.GroupMembers.members)
  return members_.Mutable(index);
}
::User* QueryMembersAck_GroupMembers::add_members() {
  // @@protoc_insertion_point(field_add:QueryMembersAck.GroupMembers.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::User >*
QueryMembersAck_GroupMembers::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:QueryMembersAck.GroupMembers.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::User >&
QueryMembersAck_GroupMembers::members() const {
  // @@protoc_insertion_point(field_list:QueryMembersAck.GroupMembers.members)
  return members_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryMembersAck::kResultFieldNumber;
const int QueryMembersAck::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryMembersAck::QueryMembersAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:QueryMembersAck)
}
QueryMembersAck::QueryMembersAck(const QueryMembersAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:QueryMembersAck)
}

void QueryMembersAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

QueryMembersAck::~QueryMembersAck() {
  // @@protoc_insertion_point(destructor:QueryMembersAck)
  SharedDtor();
}

void QueryMembersAck::SharedDtor() {
}

void QueryMembersAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryMembersAck::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryMembersAck& QueryMembersAck::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryMembersAck* QueryMembersAck::New(::google::protobuf::Arena* arena) const {
  QueryMembersAck* n = new QueryMembersAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryMembersAck::Clear() {
// @@protoc_insertion_point(message_clear_start:QueryMembersAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryMembersAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QueryMembersAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .QueryMembersAck.GroupMembers members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QueryMembersAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QueryMembersAck)
  return false;
#undef DO_
}

void QueryMembersAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QueryMembersAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .QueryMembersAck.GroupMembers members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QueryMembersAck)
}

::google::protobuf::uint8* QueryMembersAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:QueryMembersAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .QueryMembersAck.GroupMembers members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->members(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QueryMembersAck)
  return target;
}

size_t QueryMembersAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QueryMembersAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated .QueryMembersAck.GroupMembers members = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryMembersAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QueryMembersAck)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryMembersAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryMembersAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QueryMembersAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QueryMembersAck)
    MergeFrom(*source);
  }
}

void QueryMembersAck::MergeFrom(const QueryMembersAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QueryMembersAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void QueryMembersAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QueryMembersAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMembersAck::CopyFrom(const QueryMembersAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QueryMembersAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMembersAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->members())) return false;
  return true;
}

void QueryMembersAck::Swap(QueryMembersAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryMembersAck::InternalSwap(QueryMembersAck* other) {
  using std::swap;
  members_.InternalSwap(&other->members_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryMembersAck::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryMembersAck

// required int32 result = 1;
bool QueryMembersAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryMembersAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryMembersAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryMembersAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 QueryMembersAck::result() const {
  // @@protoc_insertion_point(field_get:QueryMembersAck.result)
  return result_;
}
void QueryMembersAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:QueryMembersAck.result)
}

// repeated .QueryMembersAck.GroupMembers members = 2;
int QueryMembersAck::members_size() const {
  return members_.size();
}
void QueryMembersAck::clear_members() {
  members_.Clear();
}
const ::QueryMembersAck_GroupMembers& QueryMembersAck::members(int index) const {
  // @@protoc_insertion_point(field_get:QueryMembersAck.members)
  return members_.Get(index);
}
::QueryMembersAck_GroupMembers* QueryMembersAck::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:QueryMembersAck.members)
  return members_.Mutable(index);
}
::QueryMembersAck_GroupMembers* QueryMembersAck::add_members() {
  // @@protoc_insertion_point(field_add:QueryMembersAck.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::QueryMembersAck_GroupMembers >*
QueryMembersAck::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:QueryMembersAck.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::QueryMembersAck_GroupMembers >&
QueryMembersAck::members() const {
  // @@protoc_insertion_point(field_list:QueryMembersAck.members)
  return members_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinGroup::kGidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinGroup::JoinGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:JoinGroup)
}
JoinGroup::JoinGroup(const JoinGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gid_ = from.gid_;
  // @@protoc_insertion_point(copy_constructor:JoinGroup)
}

void JoinGroup::SharedCtor() {
  _cached_size_ = 0;
  gid_ = 0u;
}

JoinGroup::~JoinGroup() {
  // @@protoc_insertion_point(destructor:JoinGroup)
  SharedDtor();
}

void JoinGroup::SharedDtor() {
}

void JoinGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGroup::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JoinGroup& JoinGroup::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

JoinGroup* JoinGroup::New(::google::protobuf::Arena* arena) const {
  JoinGroup* n = new JoinGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:JoinGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool JoinGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:JoinGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_gid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JoinGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JoinGroup)
  return false;
#undef DO_
}

void JoinGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JoinGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JoinGroup)
}

::google::protobuf::uint8* JoinGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:JoinGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JoinGroup)
  return target;
}

size_t JoinGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JoinGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 gid = 1;
  if (has_gid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gid());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JoinGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JoinGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JoinGroup)
    MergeFrom(*source);
  }
}

void JoinGroup::MergeFrom(const JoinGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JoinGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gid()) {
    set_gid(from.gid());
  }
}

void JoinGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JoinGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGroup::CopyFrom(const JoinGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JoinGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void JoinGroup::Swap(JoinGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinGroup::InternalSwap(JoinGroup* other) {
  using std::swap;
  swap(gid_, other->gid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinGroup::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinGroup

// required uint32 gid = 1;
bool JoinGroup::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void JoinGroup::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
void JoinGroup::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
void JoinGroup::clear_gid() {
  gid_ = 0u;
  clear_has_gid();
}
::google::protobuf::uint32 JoinGroup::gid() const {
  // @@protoc_insertion_point(field_get:JoinGroup.gid)
  return gid_;
}
void JoinGroup::set_gid(::google::protobuf::uint32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:JoinGroup.gid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinGroupAck::kResultFieldNumber;
const int JoinGroupAck::kGidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinGroupAck::JoinGroupAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:JoinGroupAck)
}
JoinGroupAck::JoinGroupAck(const JoinGroupAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&gid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(gid_));
  // @@protoc_insertion_point(copy_constructor:JoinGroupAck)
}

void JoinGroupAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(gid_));
}

JoinGroupAck::~JoinGroupAck() {
  // @@protoc_insertion_point(destructor:JoinGroupAck)
  SharedDtor();
}

void JoinGroupAck::SharedDtor() {
}

void JoinGroupAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGroupAck::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JoinGroupAck& JoinGroupAck::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

JoinGroupAck* JoinGroupAck::New(::google::protobuf::Arena* arena) const {
  JoinGroupAck* n = new JoinGroupAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinGroupAck::Clear() {
// @@protoc_insertion_point(message_clear_start:JoinGroupAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gid_) -
        reinterpret_cast<char*>(&result_)) + sizeof(gid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool JoinGroupAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:JoinGroupAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_gid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JoinGroupAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JoinGroupAck)
  return false;
#undef DO_
}

void JoinGroupAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JoinGroupAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint32 gid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JoinGroupAck)
}

::google::protobuf::uint8* JoinGroupAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:JoinGroupAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint32 gid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JoinGroupAck)
  return target;
}

size_t JoinGroupAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JoinGroupAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // optional uint32 gid = 2;
  if (has_gid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGroupAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JoinGroupAck)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinGroupAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinGroupAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JoinGroupAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JoinGroupAck)
    MergeFrom(*source);
  }
}

void JoinGroupAck::MergeFrom(const JoinGroupAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JoinGroupAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      gid_ = from.gid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JoinGroupAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JoinGroupAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGroupAck::CopyFrom(const JoinGroupAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JoinGroupAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroupAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void JoinGroupAck::Swap(JoinGroupAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinGroupAck::InternalSwap(JoinGroupAck* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(gid_, other->gid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinGroupAck::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinGroupAck

// required int32 result = 1;
bool JoinGroupAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void JoinGroupAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void JoinGroupAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void JoinGroupAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 JoinGroupAck::result() const {
  // @@protoc_insertion_point(field_get:JoinGroupAck.result)
  return result_;
}
void JoinGroupAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:JoinGroupAck.result)
}

// optional uint32 gid = 2;
bool JoinGroupAck::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void JoinGroupAck::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
void JoinGroupAck::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
void JoinGroupAck::clear_gid() {
  gid_ = 0u;
  clear_has_gid();
}
::google::protobuf::uint32 JoinGroupAck::gid() const {
  // @@protoc_insertion_point(field_get:JoinGroupAck.gid)
  return gid_;
}
void JoinGroupAck::set_gid(::google::protobuf::uint32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:JoinGroupAck.gid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaveGroup::kGidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaveGroup::LeaveGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LeaveGroup)
}
LeaveGroup::LeaveGroup(const LeaveGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gid_ = from.gid_;
  // @@protoc_insertion_point(copy_constructor:LeaveGroup)
}

void LeaveGroup::SharedCtor() {
  _cached_size_ = 0;
  gid_ = 0u;
}

LeaveGroup::~LeaveGroup() {
  // @@protoc_insertion_point(destructor:LeaveGroup)
  SharedDtor();
}

void LeaveGroup::SharedDtor() {
}

void LeaveGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveGroup::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeaveGroup& LeaveGroup::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

LeaveGroup* LeaveGroup::New(::google::protobuf::Arena* arena) const {
  LeaveGroup* n = new LeaveGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaveGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:LeaveGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LeaveGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LeaveGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_gid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LeaveGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LeaveGroup)
  return false;
#undef DO_
}

void LeaveGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LeaveGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LeaveGroup)
}

::google::protobuf::uint8* LeaveGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LeaveGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LeaveGroup)
  return target;
}

size_t LeaveGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LeaveGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 gid = 1;
  if (has_gid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LeaveGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaveGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaveGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LeaveGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LeaveGroup)
    MergeFrom(*source);
  }
}

void LeaveGroup::MergeFrom(const LeaveGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LeaveGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gid()) {
    set_gid(from.gid());
  }
}

void LeaveGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LeaveGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveGroup::CopyFrom(const LeaveGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LeaveGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveGroup::IsInitialized() const {
  return true;
}

void LeaveGroup::Swap(LeaveGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaveGroup::InternalSwap(LeaveGroup* other) {
  using std::swap;
  swap(gid_, other->gid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaveGroup::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaveGroup

// optional uint32 gid = 1;
bool LeaveGroup::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LeaveGroup::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
void LeaveGroup::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LeaveGroup::clear_gid() {
  gid_ = 0u;
  clear_has_gid();
}
::google::protobuf::uint32 LeaveGroup::gid() const {
  // @@protoc_insertion_point(field_get:LeaveGroup.gid)
  return gid_;
}
void LeaveGroup::set_gid(::google::protobuf::uint32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:LeaveGroup.gid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaveGroupAck::kResultFieldNumber;
const int LeaveGroupAck::kGidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaveGroupAck::LeaveGroupAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LeaveGroupAck)
}
LeaveGroupAck::LeaveGroupAck(const LeaveGroupAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&gid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(gid_));
  // @@protoc_insertion_point(copy_constructor:LeaveGroupAck)
}

void LeaveGroupAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(gid_));
}

LeaveGroupAck::~LeaveGroupAck() {
  // @@protoc_insertion_point(destructor:LeaveGroupAck)
  SharedDtor();
}

void LeaveGroupAck::SharedDtor() {
}

void LeaveGroupAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveGroupAck::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LeaveGroupAck& LeaveGroupAck::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

LeaveGroupAck* LeaveGroupAck::New(::google::protobuf::Arena* arena) const {
  LeaveGroupAck* n = new LeaveGroupAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaveGroupAck::Clear() {
// @@protoc_insertion_point(message_clear_start:LeaveGroupAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gid_) -
        reinterpret_cast<char*>(&result_)) + sizeof(gid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LeaveGroupAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LeaveGroupAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_gid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LeaveGroupAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LeaveGroupAck)
  return false;
#undef DO_
}

void LeaveGroupAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LeaveGroupAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint32 gid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LeaveGroupAck)
}

::google::protobuf::uint8* LeaveGroupAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LeaveGroupAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint32 gid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LeaveGroupAck)
  return target;
}

size_t LeaveGroupAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LeaveGroupAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // optional uint32 gid = 2;
  if (has_gid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveGroupAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LeaveGroupAck)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaveGroupAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaveGroupAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LeaveGroupAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LeaveGroupAck)
    MergeFrom(*source);
  }
}

void LeaveGroupAck::MergeFrom(const LeaveGroupAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LeaveGroupAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      gid_ = from.gid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LeaveGroupAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LeaveGroupAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveGroupAck::CopyFrom(const LeaveGroupAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LeaveGroupAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveGroupAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void LeaveGroupAck::Swap(LeaveGroupAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaveGroupAck::InternalSwap(LeaveGroupAck* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(gid_, other->gid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaveGroupAck::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaveGroupAck

// required int32 result = 1;
bool LeaveGroupAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LeaveGroupAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void LeaveGroupAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void LeaveGroupAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 LeaveGroupAck::result() const {
  // @@protoc_insertion_point(field_get:LeaveGroupAck.result)
  return result_;
}
void LeaveGroupAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:LeaveGroupAck.result)
}

// optional uint32 gid = 2;
bool LeaveGroupAck::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LeaveGroupAck::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
void LeaveGroupAck::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
void LeaveGroupAck::clear_gid() {
  gid_ = 0u;
  clear_has_gid();
}
::google::protobuf::uint32 LeaveGroupAck::gid() const {
  // @@protoc_insertion_point(field_get:LeaveGroupAck.gid)
  return gid_;
}
void LeaveGroupAck::set_gid(::google::protobuf::uint32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:LeaveGroupAck.gid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestMic::kGidFieldNumber;
const int RequestMic::kUidFieldNumber;
const int RequestMic::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestMic::RequestMic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RequestMic)
}
RequestMic::RequestMic(const RequestMic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gid_, &from.gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&payload_) -
    reinterpret_cast<char*>(&gid_)) + sizeof(payload_));
  // @@protoc_insertion_point(copy_constructor:RequestMic)
}

void RequestMic::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&gid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&payload_) -
      reinterpret_cast<char*>(&gid_)) + sizeof(payload_));
}

RequestMic::~RequestMic() {
  // @@protoc_insertion_point(destructor:RequestMic)
  SharedDtor();
}

void RequestMic::SharedDtor() {
}

void RequestMic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestMic::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestMic& RequestMic::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestMic* RequestMic::New(::google::protobuf::Arena* arena) const {
  RequestMic* n = new RequestMic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestMic::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestMic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&payload_) -
        reinterpret_cast<char*>(&gid_)) + sizeof(payload_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestMic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RequestMic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_gid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 payload = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_payload();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RequestMic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RequestMic)
  return false;
#undef DO_
}

void RequestMic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RequestMic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gid(), output);
  }

  // optional uint32 uid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // optional uint32 payload = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->payload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RequestMic)
}

::google::protobuf::uint8* RequestMic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RequestMic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gid(), target);
  }

  // optional uint32 uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // optional uint32 payload = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->payload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestMic)
  return target;
}

size_t RequestMic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestMic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gid());
    }

    // optional uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 payload = 3;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payload());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestMic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RequestMic)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestMic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestMic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RequestMic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RequestMic)
    MergeFrom(*source);
  }
}

void RequestMic::MergeFrom(const RequestMic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RequestMic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      gid_ = from.gid_;
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      payload_ = from.payload_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestMic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RequestMic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestMic::CopyFrom(const RequestMic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestMic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMic::IsInitialized() const {
  return true;
}

void RequestMic::Swap(RequestMic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestMic::InternalSwap(RequestMic* other) {
  using std::swap;
  swap(gid_, other->gid_);
  swap(uid_, other->uid_);
  swap(payload_, other->payload_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestMic::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestMic

// optional uint32 gid = 1;
bool RequestMic::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestMic::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestMic::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestMic::clear_gid() {
  gid_ = 0u;
  clear_has_gid();
}
::google::protobuf::uint32 RequestMic::gid() const {
  // @@protoc_insertion_point(field_get:RequestMic.gid)
  return gid_;
}
void RequestMic::set_gid(::google::protobuf::uint32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:RequestMic.gid)
}

// optional uint32 uid = 2;
bool RequestMic::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RequestMic::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
void RequestMic::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
void RequestMic::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 RequestMic::uid() const {
  // @@protoc_insertion_point(field_get:RequestMic.uid)
  return uid_;
}
void RequestMic::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:RequestMic.uid)
}

// optional uint32 payload = 3;
bool RequestMic::has_payload() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RequestMic::set_has_payload() {
  _has_bits_[0] |= 0x00000004u;
}
void RequestMic::clear_has_payload() {
  _has_bits_[0] &= ~0x00000004u;
}
void RequestMic::clear_payload() {
  payload_ = 0u;
  clear_has_payload();
}
::google::protobuf::uint32 RequestMic::payload() const {
  // @@protoc_insertion_point(field_get:RequestMic.payload)
  return payload_;
}
void RequestMic::set_payload(::google::protobuf::uint32 value) {
  set_has_payload();
  payload_ = value;
  // @@protoc_insertion_point(field_set:RequestMic.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestMicAck::kResultFieldNumber;
const int RequestMicAck::kCookieFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestMicAck::RequestMicAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RequestMicAck)
}
RequestMicAck::RequestMicAck(const RequestMicAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&cookie_) -
    reinterpret_cast<char*>(&result_)) + sizeof(cookie_));
  // @@protoc_insertion_point(copy_constructor:RequestMicAck)
}

void RequestMicAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cookie_) -
      reinterpret_cast<char*>(&result_)) + sizeof(cookie_));
}

RequestMicAck::~RequestMicAck() {
  // @@protoc_insertion_point(destructor:RequestMicAck)
  SharedDtor();
}

void RequestMicAck::SharedDtor() {
}

void RequestMicAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestMicAck::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestMicAck& RequestMicAck::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestMicAck* RequestMicAck::New(::google::protobuf::Arena* arena) const {
  RequestMicAck* n = new RequestMicAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestMicAck::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestMicAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cookie_) -
        reinterpret_cast<char*>(&result_)) + sizeof(cookie_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestMicAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RequestMicAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cookie = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_cookie();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RequestMicAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RequestMicAck)
  return false;
#undef DO_
}

void RequestMicAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RequestMicAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint32 cookie = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cookie(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RequestMicAck)
}

::google::protobuf::uint8* RequestMicAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RequestMicAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint32 cookie = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cookie(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestMicAck)
  return target;
}

size_t RequestMicAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestMicAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // optional uint32 cookie = 2;
  if (has_cookie()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cookie());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestMicAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RequestMicAck)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestMicAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestMicAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RequestMicAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RequestMicAck)
    MergeFrom(*source);
  }
}

void RequestMicAck::MergeFrom(const RequestMicAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RequestMicAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      cookie_ = from.cookie_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestMicAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RequestMicAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestMicAck::CopyFrom(const RequestMicAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestMicAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMicAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RequestMicAck::Swap(RequestMicAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestMicAck::InternalSwap(RequestMicAck* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(cookie_, other->cookie_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestMicAck::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestMicAck

// required int32 result = 1;
bool RequestMicAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestMicAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestMicAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestMicAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 RequestMicAck::result() const {
  // @@protoc_insertion_point(field_get:RequestMicAck.result)
  return result_;
}
void RequestMicAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:RequestMicAck.result)
}

// optional uint32 cookie = 2;
bool RequestMicAck::has_cookie() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RequestMicAck::set_has_cookie() {
  _has_bits_[0] |= 0x00000002u;
}
void RequestMicAck::clear_has_cookie() {
  _has_bits_[0] &= ~0x00000002u;
}
void RequestMicAck::clear_cookie() {
  cookie_ = 0u;
  clear_has_cookie();
}
::google::protobuf::uint32 RequestMicAck::cookie() const {
  // @@protoc_insertion_point(field_get:RequestMicAck.cookie)
  return cookie_;
}
void RequestMicAck::set_cookie(::google::protobuf::uint32 value) {
  set_has_cookie();
  cookie_ = value;
  // @@protoc_insertion_point(field_set:RequestMicAck.cookie)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReleaseMic::kGidFieldNumber;
const int ReleaseMic::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReleaseMic::ReleaseMic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReleaseMic)
}
ReleaseMic::ReleaseMic(const ReleaseMic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gid_, &from.gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&gid_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:ReleaseMic)
}

void ReleaseMic::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&gid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&gid_)) + sizeof(uid_));
}

ReleaseMic::~ReleaseMic() {
  // @@protoc_insertion_point(destructor:ReleaseMic)
  SharedDtor();
}

void ReleaseMic::SharedDtor() {
}

void ReleaseMic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReleaseMic::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReleaseMic& ReleaseMic::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReleaseMic* ReleaseMic::New(::google::protobuf::Arena* arena) const {
  ReleaseMic* n = new ReleaseMic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReleaseMic::Clear() {
// @@protoc_insertion_point(message_clear_start:ReleaseMic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uid_) -
        reinterpret_cast<char*>(&gid_)) + sizeof(uid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReleaseMic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReleaseMic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_gid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReleaseMic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReleaseMic)
  return false;
#undef DO_
}

void ReleaseMic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReleaseMic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gid(), output);
  }

  // optional uint32 uid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ReleaseMic)
}

::google::protobuf::uint8* ReleaseMic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ReleaseMic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gid(), target);
  }

  // optional uint32 uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReleaseMic)
  return target;
}

size_t ReleaseMic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReleaseMic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gid());
    }

    // optional uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReleaseMic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReleaseMic)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseMic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReleaseMic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReleaseMic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReleaseMic)
    MergeFrom(*source);
  }
}

void ReleaseMic::MergeFrom(const ReleaseMic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReleaseMic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      gid_ = from.gid_;
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReleaseMic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReleaseMic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseMic::CopyFrom(const ReleaseMic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReleaseMic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseMic::IsInitialized() const {
  return true;
}

void ReleaseMic::Swap(ReleaseMic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReleaseMic::InternalSwap(ReleaseMic* other) {
  using std::swap;
  swap(gid_, other->gid_);
  swap(uid_, other->uid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReleaseMic::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReleaseMic

// optional uint32 gid = 1;
bool ReleaseMic::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReleaseMic::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReleaseMic::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReleaseMic::clear_gid() {
  gid_ = 0u;
  clear_has_gid();
}
::google::protobuf::uint32 ReleaseMic::gid() const {
  // @@protoc_insertion_point(field_get:ReleaseMic.gid)
  return gid_;
}
void ReleaseMic::set_gid(::google::protobuf::uint32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:ReleaseMic.gid)
}

// optional uint32 uid = 2;
bool ReleaseMic::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReleaseMic::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
void ReleaseMic::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReleaseMic::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 ReleaseMic::uid() const {
  // @@protoc_insertion_point(field_get:ReleaseMic.uid)
  return uid_;
}
void ReleaseMic::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:ReleaseMic.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReleaseMicAck::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReleaseMicAck::ReleaseMicAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReleaseMicAck)
}
ReleaseMicAck::ReleaseMicAck(const ReleaseMicAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:ReleaseMicAck)
}

void ReleaseMicAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

ReleaseMicAck::~ReleaseMicAck() {
  // @@protoc_insertion_point(destructor:ReleaseMicAck)
  SharedDtor();
}

void ReleaseMicAck::SharedDtor() {
}

void ReleaseMicAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReleaseMicAck::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReleaseMicAck& ReleaseMicAck::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReleaseMicAck* ReleaseMicAck::New(::google::protobuf::Arena* arena) const {
  ReleaseMicAck* n = new ReleaseMicAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReleaseMicAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ReleaseMicAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReleaseMicAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReleaseMicAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReleaseMicAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReleaseMicAck)
  return false;
#undef DO_
}

void ReleaseMicAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReleaseMicAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ReleaseMicAck)
}

::google::protobuf::uint8* ReleaseMicAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ReleaseMicAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReleaseMicAck)
  return target;
}

size_t ReleaseMicAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReleaseMicAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReleaseMicAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReleaseMicAck)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseMicAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReleaseMicAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReleaseMicAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReleaseMicAck)
    MergeFrom(*source);
  }
}

void ReleaseMicAck::MergeFrom(const ReleaseMicAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReleaseMicAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void ReleaseMicAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReleaseMicAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseMicAck::CopyFrom(const ReleaseMicAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReleaseMicAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseMicAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ReleaseMicAck::Swap(ReleaseMicAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReleaseMicAck::InternalSwap(ReleaseMicAck* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReleaseMicAck::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReleaseMicAck

// required int32 result = 1;
bool ReleaseMicAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReleaseMicAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void ReleaseMicAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReleaseMicAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 ReleaseMicAck::result() const {
  // @@protoc_insertion_point(field_get:ReleaseMicAck.result)
  return result_;
}
void ReleaseMicAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:ReleaseMicAck.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Call::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Call::Call()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Call)
}
Call::Call(const Call& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      uid_(from.uid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Call)
}

void Call::SharedCtor() {
  _cached_size_ = 0;
}

Call::~Call() {
  // @@protoc_insertion_point(destructor:Call)
  SharedDtor();
}

void Call::SharedDtor() {
}

void Call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Call& Call::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

Call* Call::New(::google::protobuf::Arena* arena) const {
  Call* n = new Call;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Call::Clear() {
// @@protoc_insertion_point(message_clear_start:Call)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Call)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_uid())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Call)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Call)
  return false;
#undef DO_
}

void Call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Call)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 uid = 1;
  for (int i = 0, n = this->uid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->uid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Call)
}

::google::protobuf::uint8* Call::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Call)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 uid = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->uid_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Call)
  return target;
}

size_t Call::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Call)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 uid = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->uid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->uid_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Call)
  GOOGLE_DCHECK_NE(&from, this);
  const Call* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Call>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Call)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Call)
    MergeFrom(*source);
  }
}

void Call::MergeFrom(const Call& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Call)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uid_.MergeFrom(from.uid_);
}

void Call::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Call)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call::CopyFrom(const Call& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Call)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call::IsInitialized() const {
  return true;
}

void Call::Swap(Call* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Call::InternalSwap(Call* other) {
  using std::swap;
  uid_.InternalSwap(&other->uid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Call::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Call

// repeated uint32 uid = 1;
int Call::uid_size() const {
  return uid_.size();
}
void Call::clear_uid() {
  uid_.Clear();
}
::google::protobuf::uint32 Call::uid(int index) const {
  // @@protoc_insertion_point(field_get:Call.uid)
  return uid_.Get(index);
}
void Call::set_uid(int index, ::google::protobuf::uint32 value) {
  uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Call.uid)
}
void Call::add_uid(::google::protobuf::uint32 value) {
  uid_.Add(value);
  // @@protoc_insertion_point(field_add:Call.uid)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Call::uid() const {
  // @@protoc_insertion_point(field_list:Call.uid)
  return uid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Call::mutable_uid() {
  // @@protoc_insertion_point(field_mutable_list:Call.uid)
  return &uid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CallAck::kResultFieldNumber;
const int CallAck::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CallAck::CallAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CallAck)
}
CallAck::CallAck(const CallAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      uid_(from.uid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CallAck)
}

void CallAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CallAck::~CallAck() {
  // @@protoc_insertion_point(destructor:CallAck)
  SharedDtor();
}

void CallAck::SharedDtor() {
}

void CallAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallAck::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CallAck& CallAck::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

CallAck* CallAck::New(::google::protobuf::Arena* arena) const {
  CallAck* n = new CallAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CallAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CallAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CallAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CallAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_uid())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CallAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CallAck)
  return false;
#undef DO_
}

void CallAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CallAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated uint32 uid = 2;
  for (int i = 0, n = this->uid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->uid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CallAck)
}

::google::protobuf::uint8* CallAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CallAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated uint32 uid = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->uid_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CallAck)
  return target;
}

size_t CallAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CallAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  // repeated uint32 uid = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->uid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->uid_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CallAck)
  GOOGLE_DCHECK_NE(&from, this);
  const CallAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CallAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CallAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CallAck)
    MergeFrom(*source);
  }
}

void CallAck::MergeFrom(const CallAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CallAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uid_.MergeFrom(from.uid_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void CallAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CallAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallAck::CopyFrom(const CallAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CallAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CallAck::Swap(CallAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CallAck::InternalSwap(CallAck* other) {
  using std::swap;
  uid_.InternalSwap(&other->uid_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CallAck::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CallAck

// required int32 result = 1;
bool CallAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CallAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CallAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CallAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 CallAck::result() const {
  // @@protoc_insertion_point(field_get:CallAck.result)
  return result_;
}
void CallAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CallAck.result)
}

// repeated uint32 uid = 2;
int CallAck::uid_size() const {
  return uid_.size();
}
void CallAck::clear_uid() {
  uid_.Clear();
}
::google::protobuf::uint32 CallAck::uid(int index) const {
  // @@protoc_insertion_point(field_get:CallAck.uid)
  return uid_.Get(index);
}
void CallAck::set_uid(int index, ::google::protobuf::uint32 value) {
  uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:CallAck.uid)
}
void CallAck::add_uid(::google::protobuf::uint32 value) {
  uid_.Add(value);
  // @@protoc_insertion_point(field_add:CallAck.uid)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CallAck::uid() const {
  // @@protoc_insertion_point(field_list:CallAck.uid)
  return uid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CallAck::mutable_uid() {
  // @@protoc_insertion_point(field_mutable_list:CallAck.uid)
  return &uid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TempCallArrived::kCallNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TempCallArrived::TempCallArrived()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TempCallArrived)
}
TempCallArrived::TempCallArrived(const TempCallArrived& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  call_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_call_name()) {
    call_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.call_name_);
  }
  // @@protoc_insertion_point(copy_constructor:TempCallArrived)
}

void TempCallArrived::SharedCtor() {
  _cached_size_ = 0;
  call_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TempCallArrived::~TempCallArrived() {
  // @@protoc_insertion_point(destructor:TempCallArrived)
  SharedDtor();
}

void TempCallArrived::SharedDtor() {
  call_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TempCallArrived::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TempCallArrived::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TempCallArrived& TempCallArrived::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

TempCallArrived* TempCallArrived::New(::google::protobuf::Arena* arena) const {
  TempCallArrived* n = new TempCallArrived;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TempCallArrived::Clear() {
// @@protoc_insertion_point(message_clear_start:TempCallArrived)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_call_name()) {
    GOOGLE_DCHECK(!call_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*call_name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TempCallArrived::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TempCallArrived)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string call_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_call_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->call_name().data(), static_cast<int>(this->call_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TempCallArrived.call_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TempCallArrived)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TempCallArrived)
  return false;
#undef DO_
}

void TempCallArrived::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TempCallArrived)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string call_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->call_name().data(), static_cast<int>(this->call_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TempCallArrived.call_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->call_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TempCallArrived)
}

::google::protobuf::uint8* TempCallArrived::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TempCallArrived)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string call_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->call_name().data(), static_cast<int>(this->call_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TempCallArrived.call_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->call_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempCallArrived)
  return target;
}

size_t TempCallArrived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempCallArrived)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string call_name = 1;
  if (has_call_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->call_name());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TempCallArrived::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TempCallArrived)
  GOOGLE_DCHECK_NE(&from, this);
  const TempCallArrived* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TempCallArrived>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TempCallArrived)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TempCallArrived)
    MergeFrom(*source);
  }
}

void TempCallArrived::MergeFrom(const TempCallArrived& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TempCallArrived)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_call_name()) {
    set_has_call_name();
    call_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.call_name_);
  }
}

void TempCallArrived::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TempCallArrived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TempCallArrived::CopyFrom(const TempCallArrived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempCallArrived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TempCallArrived::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TempCallArrived::Swap(TempCallArrived* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TempCallArrived::InternalSwap(TempCallArrived* other) {
  using std::swap;
  call_name_.Swap(&other->call_name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TempCallArrived::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TempCallArrived

// required string call_name = 1;
bool TempCallArrived::has_call_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TempCallArrived::set_has_call_name() {
  _has_bits_[0] |= 0x00000001u;
}
void TempCallArrived::clear_has_call_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void TempCallArrived::clear_call_name() {
  call_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_call_name();
}
const ::std::string& TempCallArrived::call_name() const {
  // @@protoc_insertion_point(field_get:TempCallArrived.call_name)
  return call_name_.GetNoArena();
}
void TempCallArrived::set_call_name(const ::std::string& value) {
  set_has_call_name();
  call_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TempCallArrived.call_name)
}
#if LANG_CXX11
void TempCallArrived::set_call_name(::std::string&& value) {
  set_has_call_name();
  call_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TempCallArrived.call_name)
}
#endif
void TempCallArrived::set_call_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_call_name();
  call_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TempCallArrived.call_name)
}
void TempCallArrived::set_call_name(const char* value, size_t size) {
  set_has_call_name();
  call_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TempCallArrived.call_name)
}
::std::string* TempCallArrived::mutable_call_name() {
  set_has_call_name();
  // @@protoc_insertion_point(field_mutable:TempCallArrived.call_name)
  return call_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TempCallArrived::release_call_name() {
  // @@protoc_insertion_point(field_release:TempCallArrived.call_name)
  clear_has_call_name();
  return call_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TempCallArrived::set_allocated_call_name(::std::string* call_name) {
  if (call_name != NULL) {
    set_has_call_name();
  } else {
    clear_has_call_name();
  }
  call_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), call_name);
  // @@protoc_insertion_point(field_set_allocated:TempCallArrived.call_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TempCallStatus::kCallStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TempCallStatus::TempCallStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TempCallStatus)
}
TempCallStatus::TempCallStatus(const TempCallStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  call_status_ = from.call_status_;
  // @@protoc_insertion_point(copy_constructor:TempCallStatus)
}

void TempCallStatus::SharedCtor() {
  _cached_size_ = 0;
  call_status_ = 0u;
}

TempCallStatus::~TempCallStatus() {
  // @@protoc_insertion_point(destructor:TempCallStatus)
  SharedDtor();
}

void TempCallStatus::SharedDtor() {
}

void TempCallStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TempCallStatus::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TempCallStatus& TempCallStatus::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

TempCallStatus* TempCallStatus::New(::google::protobuf::Arena* arena) const {
  TempCallStatus* n = new TempCallStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TempCallStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:TempCallStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  call_status_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TempCallStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TempCallStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 call_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_call_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &call_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TempCallStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TempCallStatus)
  return false;
#undef DO_
}

void TempCallStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TempCallStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 call_status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->call_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TempCallStatus)
}

::google::protobuf::uint8* TempCallStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TempCallStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 call_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->call_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TempCallStatus)
  return target;
}

size_t TempCallStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TempCallStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 call_status = 1;
  if (has_call_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->call_status());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TempCallStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TempCallStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const TempCallStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TempCallStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TempCallStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TempCallStatus)
    MergeFrom(*source);
  }
}

void TempCallStatus::MergeFrom(const TempCallStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TempCallStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_call_status()) {
    set_call_status(from.call_status());
  }
}

void TempCallStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TempCallStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TempCallStatus::CopyFrom(const TempCallStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TempCallStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TempCallStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TempCallStatus::Swap(TempCallStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TempCallStatus::InternalSwap(TempCallStatus* other) {
  using std::swap;
  swap(call_status_, other->call_status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TempCallStatus::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TempCallStatus

// required uint32 call_status = 1;
bool TempCallStatus::has_call_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TempCallStatus::set_has_call_status() {
  _has_bits_[0] |= 0x00000001u;
}
void TempCallStatus::clear_has_call_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void TempCallStatus::clear_call_status() {
  call_status_ = 0u;
  clear_has_call_status();
}
::google::protobuf::uint32 TempCallStatus::call_status() const {
  // @@protoc_insertion_point(field_get:TempCallStatus.call_status)
  return call_status_;
}
void TempCallStatus::set_call_status(::google::protobuf::uint32 value) {
  set_has_call_status();
  call_status_ = value;
  // @@protoc_insertion_point(field_set:TempCallStatus.call_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Logout::Logout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Logout)
}
Logout::Logout(const Logout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Logout)
}

void Logout::SharedCtor() {
  _cached_size_ = 0;
}

Logout::~Logout() {
  // @@protoc_insertion_point(destructor:Logout)
  SharedDtor();
}

void Logout::SharedDtor() {
}

void Logout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Logout::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Logout& Logout::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

Logout* Logout::New(::google::protobuf::Arena* arena) const {
  Logout* n = new Logout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Logout::Clear() {
// @@protoc_insertion_point(message_clear_start:Logout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Logout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Logout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Logout)
  return false;
#undef DO_
}

void Logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Logout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Logout)
}

::google::protobuf::uint8* Logout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Logout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Logout)
  return target;
}

size_t Logout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Logout)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Logout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Logout)
  GOOGLE_DCHECK_NE(&from, this);
  const Logout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Logout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Logout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Logout)
    MergeFrom(*source);
  }
}

void Logout::MergeFrom(const Logout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Logout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Logout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Logout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logout::CopyFrom(const Logout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Logout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logout::IsInitialized() const {
  return true;
}

void Logout::Swap(Logout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Logout::InternalSwap(Logout* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Logout::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Logout

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogoutAck::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutAck::LogoutAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogoutAck)
}
LogoutAck::LogoutAck(const LogoutAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:LogoutAck)
}

void LogoutAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

LogoutAck::~LogoutAck() {
  // @@protoc_insertion_point(destructor:LogoutAck)
  SharedDtor();
}

void LogoutAck::SharedDtor() {
}

void LogoutAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutAck::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogoutAck& LogoutAck::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogoutAck* LogoutAck::New(::google::protobuf::Arena* arena) const {
  LogoutAck* n = new LogoutAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogoutAck::Clear() {
// @@protoc_insertion_point(message_clear_start:LogoutAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogoutAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogoutAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogoutAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogoutAck)
  return false;
#undef DO_
}

void LogoutAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogoutAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogoutAck)
}

::google::protobuf::uint8* LogoutAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LogoutAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogoutAck)
  return target;
}

size_t LogoutAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogoutAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogoutAck)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogoutAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogoutAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogoutAck)
    MergeFrom(*source);
  }
}

void LogoutAck::MergeFrom(const LogoutAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogoutAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void LogoutAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogoutAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutAck::CopyFrom(const LogoutAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogoutAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void LogoutAck::Swap(LogoutAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutAck::InternalSwap(LogoutAck* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogoutAck::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogoutAck

// required int32 result = 1;
bool LogoutAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogoutAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void LogoutAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogoutAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 LogoutAck::result() const {
  // @@protoc_insertion_point(field_get:LogoutAck.result)
  return result_;
}
void LogoutAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:LogoutAck.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportLocation::kLongitudeFieldNumber;
const int ReportLocation::kLatitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportLocation::ReportLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReportLocation)
}
ReportLocation::ReportLocation(const ReportLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:ReportLocation)
}

void ReportLocation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
}

ReportLocation::~ReportLocation() {
  // @@protoc_insertion_point(destructor:ReportLocation)
  SharedDtor();
}

void ReportLocation::SharedDtor() {
}

void ReportLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportLocation::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportLocation& ReportLocation::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReportLocation* ReportLocation::New(::google::protobuf::Arena* arena) const {
  ReportLocation* n = new ReportLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:ReportLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&longitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latitude_) -
        reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReportLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReportLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double longitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReportLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReportLocation)
  return false;
#undef DO_
}

void ReportLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReportLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double longitude = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->longitude(), output);
  }

  // required double latitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ReportLocation)
}

::google::protobuf::uint8* ReportLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ReportLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double longitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->longitude(), target);
  }

  // required double latitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReportLocation)
  return target;
}

size_t ReportLocation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ReportLocation)
  size_t total_size = 0;

  if (has_longitude()) {
    // required double longitude = 1;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t ReportLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReportLocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double longitude = 1;
    total_size += 1 + 8;

    // required double latitude = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReportLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReportLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReportLocation)
    MergeFrom(*source);
  }
}

void ReportLocation::MergeFrom(const ReportLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReportLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      latitude_ = from.latitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReportLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReportLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportLocation::CopyFrom(const ReportLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReportLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportLocation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ReportLocation::Swap(ReportLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportLocation::InternalSwap(ReportLocation* other) {
  using std::swap;
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReportLocation::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportLocation

// required double longitude = 1;
bool ReportLocation::has_longitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReportLocation::set_has_longitude() {
  _has_bits_[0] |= 0x00000001u;
}
void ReportLocation::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReportLocation::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
double ReportLocation::longitude() const {
  // @@protoc_insertion_point(field_get:ReportLocation.longitude)
  return longitude_;
}
void ReportLocation::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:ReportLocation.longitude)
}

// required double latitude = 2;
bool ReportLocation::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReportLocation::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
void ReportLocation::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReportLocation::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
double ReportLocation::latitude() const {
  // @@protoc_insertion_point(field_get:ReportLocation.latitude)
  return latitude_;
}
void ReportLocation::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:ReportLocation.latitude)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportLocationAck::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportLocationAck::ReportLocationAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReportLocationAck)
}
ReportLocationAck::ReportLocationAck(const ReportLocationAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:ReportLocationAck)
}

void ReportLocationAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

ReportLocationAck::~ReportLocationAck() {
  // @@protoc_insertion_point(destructor:ReportLocationAck)
  SharedDtor();
}

void ReportLocationAck::SharedDtor() {
}

void ReportLocationAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportLocationAck::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportLocationAck& ReportLocationAck::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReportLocationAck* ReportLocationAck::New(::google::protobuf::Arena* arena) const {
  ReportLocationAck* n = new ReportLocationAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportLocationAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ReportLocationAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReportLocationAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReportLocationAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReportLocationAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReportLocationAck)
  return false;
#undef DO_
}

void ReportLocationAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReportLocationAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ReportLocationAck)
}

::google::protobuf::uint8* ReportLocationAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ReportLocationAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReportLocationAck)
  return target;
}

size_t ReportLocationAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReportLocationAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportLocationAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReportLocationAck)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportLocationAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportLocationAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReportLocationAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReportLocationAck)
    MergeFrom(*source);
  }
}

void ReportLocationAck::MergeFrom(const ReportLocationAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReportLocationAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void ReportLocationAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReportLocationAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportLocationAck::CopyFrom(const ReportLocationAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReportLocationAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportLocationAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ReportLocationAck::Swap(ReportLocationAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportLocationAck::InternalSwap(ReportLocationAck* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReportLocationAck::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportLocationAck

// required int32 result = 1;
bool ReportLocationAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReportLocationAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void ReportLocationAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReportLocationAck::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 ReportLocationAck::result() const {
  // @@protoc_insertion_point(field_get:ReportLocationAck.result)
  return result_;
}
void ReportLocationAck::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:ReportLocationAck.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ping::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ping::Ping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ping)
}
Ping::Ping(const Ping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:Ping)
}

void Ping::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:Ping)
  SharedDtor();
}

void Ping::SharedDtor() {
}

void Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ping::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ping& Ping::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ping* Ping::New(::google::protobuf::Arena* arena) const {
  Ping* n = new Ping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:Ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ping)
  return false;
#undef DO_
}

void Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Ping)
}

::google::protobuf::uint8* Ping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Ping)
  return target;
}

size_t Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Ping)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Ping)
  GOOGLE_DCHECK_NE(&from, this);
  const Ping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Ping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Ping)
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    set_timestamp(from.timestamp());
  }
}

void Ping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  return true;
}

void Ping::Swap(Ping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ping::InternalSwap(Ping* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ping::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ping

// optional uint32 timestamp = 1;
bool Ping::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ping::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void Ping::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ping::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 Ping::timestamp() const {
  // @@protoc_insertion_point(field_get:Ping.timestamp)
  return timestamp_;
}
void Ping::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Ping.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PingAck::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingAck::PingAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PingAck)
}
PingAck::PingAck(const PingAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:PingAck)
}

void PingAck::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
}

PingAck::~PingAck() {
  // @@protoc_insertion_point(destructor:PingAck)
  SharedDtor();
}

void PingAck::SharedDtor() {
}

void PingAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingAck::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PingAck& PingAck::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

PingAck* PingAck::New(::google::protobuf::Arena* arena) const {
  PingAck* n = new PingAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PingAck::Clear() {
// @@protoc_insertion_point(message_clear_start:PingAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PingAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PingAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PingAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PingAck)
  return false;
#undef DO_
}

void PingAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PingAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PingAck)
}

::google::protobuf::uint8* PingAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PingAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PingAck)
  return target;
}

size_t PingAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PingAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PingAck)
  GOOGLE_DCHECK_NE(&from, this);
  const PingAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PingAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PingAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PingAck)
    MergeFrom(*source);
  }
}

void PingAck::MergeFrom(const PingAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PingAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    set_timestamp(from.timestamp());
  }
}

void PingAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PingAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingAck::CopyFrom(const PingAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PingAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingAck::IsInitialized() const {
  return true;
}

void PingAck::Swap(PingAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingAck::InternalSwap(PingAck* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PingAck::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PingAck

// optional uint32 timestamp = 1;
bool PingAck::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PingAck::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void PingAck::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void PingAck::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 PingAck::timestamp() const {
  // @@protoc_insertion_point(field_get:PingAck.timestamp)
  return timestamp_;
}
void PingAck::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:PingAck.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LostMic::kGidFieldNumber;
const int LostMic::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LostMic::LostMic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LostMic)
}
LostMic::LostMic(const LostMic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  gid_ = from.gid_;
  // @@protoc_insertion_point(copy_constructor:LostMic)
}

void LostMic::SharedCtor() {
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gid_ = 0u;
}

LostMic::~LostMic() {
  // @@protoc_insertion_point(destructor:LostMic)
  SharedDtor();
}

void LostMic::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LostMic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LostMic::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LostMic& LostMic::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

LostMic* LostMic::New(::google::protobuf::Arena* arena) const {
  LostMic* n = new LostMic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LostMic::Clear() {
// @@protoc_insertion_point(message_clear_start:LostMic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_reason()) {
    GOOGLE_DCHECK(!reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*reason_.UnsafeRawStringPointer())->clear();
  }
  gid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LostMic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LostMic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_gid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LostMic.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LostMic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LostMic)
  return false;
#undef DO_
}

void LostMic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LostMic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gid(), output);
  }

  // required string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LostMic.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LostMic)
}

::google::protobuf::uint8* LostMic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LostMic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gid(), target);
  }

  // required string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LostMic.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LostMic)
  return target;
}

size_t LostMic::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LostMic)
  size_t total_size = 0;

  if (has_reason()) {
    // required string reason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  if (has_gid()) {
    // required uint32 gid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gid());
  }

  return total_size;
}
size_t LostMic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LostMic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string reason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());

    // required uint32 gid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LostMic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LostMic)
  GOOGLE_DCHECK_NE(&from, this);
  const LostMic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LostMic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LostMic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LostMic)
    MergeFrom(*source);
  }
}

void LostMic::MergeFrom(const LostMic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LostMic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      gid_ = from.gid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LostMic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LostMic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LostMic::CopyFrom(const LostMic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LostMic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LostMic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void LostMic::Swap(LostMic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LostMic::InternalSwap(LostMic* other) {
  using std::swap;
  reason_.Swap(&other->reason_);
  swap(gid_, other->gid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LostMic::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LostMic

// required uint32 gid = 1;
bool LostMic::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LostMic::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
void LostMic::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
void LostMic::clear_gid() {
  gid_ = 0u;
  clear_has_gid();
}
::google::protobuf::uint32 LostMic::gid() const {
  // @@protoc_insertion_point(field_get:LostMic.gid)
  return gid_;
}
void LostMic::set_gid(::google::protobuf::uint32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:LostMic.gid)
}

// required string reason = 2;
bool LostMic::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LostMic::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void LostMic::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void LostMic::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
const ::std::string& LostMic::reason() const {
  // @@protoc_insertion_point(field_get:LostMic.reason)
  return reason_.GetNoArena();
}
void LostMic::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LostMic.reason)
}
#if LANG_CXX11
void LostMic::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LostMic.reason)
}
#endif
void LostMic::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LostMic.reason)
}
void LostMic::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LostMic.reason)
}
::std::string* LostMic::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:LostMic.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LostMic::release_reason() {
  // @@protoc_insertion_point(field_release:LostMic.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LostMic::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:LostMic.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Kickout::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Kickout::Kickout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kickout)
}
Kickout::Kickout(const Kickout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  // @@protoc_insertion_point(copy_constructor:Kickout)
}

void Kickout::SharedCtor() {
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Kickout::~Kickout() {
  // @@protoc_insertion_point(destructor:Kickout)
  SharedDtor();
}

void Kickout::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Kickout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Kickout::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Kickout& Kickout::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

Kickout* Kickout::New(::google::protobuf::Arena* arena) const {
  Kickout* n = new Kickout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Kickout::Clear() {
// @@protoc_insertion_point(message_clear_start:Kickout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_reason()) {
    GOOGLE_DCHECK(!reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*reason_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Kickout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kickout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string reason = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Kickout.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kickout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kickout)
  return false;
#undef DO_
}

void Kickout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kickout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string reason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Kickout.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Kickout)
}

::google::protobuf::uint8* Kickout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kickout)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string reason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Kickout.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kickout)
  return target;
}

size_t Kickout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kickout)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string reason = 1;
  if (has_reason()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Kickout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kickout)
  GOOGLE_DCHECK_NE(&from, this);
  const Kickout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Kickout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kickout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kickout)
    MergeFrom(*source);
  }
}

void Kickout::MergeFrom(const Kickout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kickout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reason()) {
    set_has_reason();
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
}

void Kickout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kickout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Kickout::CopyFrom(const Kickout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kickout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Kickout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Kickout::Swap(Kickout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Kickout::InternalSwap(Kickout* other) {
  using std::swap;
  reason_.Swap(&other->reason_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Kickout::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Kickout

// required string reason = 1;
bool Kickout::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Kickout::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void Kickout::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void Kickout::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
const ::std::string& Kickout::reason() const {
  // @@protoc_insertion_point(field_get:Kickout.reason)
  return reason_.GetNoArena();
}
void Kickout::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Kickout.reason)
}
#if LANG_CXX11
void Kickout::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Kickout.reason)
}
#endif
void Kickout::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Kickout.reason)
}
void Kickout::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Kickout.reason)
}
::std::string* Kickout::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:Kickout.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Kickout::release_reason() {
  // @@protoc_insertion_point(field_release:Kickout.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Kickout::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:Kickout.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reconfigured::kConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reconfigured::Reconfigured()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Reconfigured)
}
Reconfigured::Reconfigured(const Reconfigured& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_conf()) {
    conf_ = new ::Configure(*from.conf_);
  } else {
    conf_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Reconfigured)
}

void Reconfigured::SharedCtor() {
  _cached_size_ = 0;
  conf_ = NULL;
}

Reconfigured::~Reconfigured() {
  // @@protoc_insertion_point(destructor:Reconfigured)
  SharedDtor();
}

void Reconfigured::SharedDtor() {
  if (this != internal_default_instance()) delete conf_;
}

void Reconfigured::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reconfigured::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Reconfigured& Reconfigured::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

Reconfigured* Reconfigured::New(::google::protobuf::Arena* arena) const {
  Reconfigured* n = new Reconfigured;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Reconfigured::Clear() {
// @@protoc_insertion_point(message_clear_start:Reconfigured)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_conf()) {
    GOOGLE_DCHECK(conf_ != NULL);
    conf_->::Configure::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Reconfigured::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Reconfigured)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Configure conf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Reconfigured)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Reconfigured)
  return false;
#undef DO_
}

void Reconfigured::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Reconfigured)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Configure conf = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->conf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Reconfigured)
}

::google::protobuf::uint8* Reconfigured::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Reconfigured)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Configure conf = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->conf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Reconfigured)
  return target;
}

size_t Reconfigured::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Reconfigured)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Configure conf = 1;
  if (has_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->conf_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reconfigured::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Reconfigured)
  GOOGLE_DCHECK_NE(&from, this);
  const Reconfigured* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Reconfigured>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Reconfigured)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Reconfigured)
    MergeFrom(*source);
  }
}

void Reconfigured::MergeFrom(const Reconfigured& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Reconfigured)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_conf()) {
    mutable_conf()->::Configure::MergeFrom(from.conf());
  }
}

void Reconfigured::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Reconfigured)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reconfigured::CopyFrom(const Reconfigured& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Reconfigured)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reconfigured::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_conf()) {
    if (!this->conf_->IsInitialized()) return false;
  }
  return true;
}

void Reconfigured::Swap(Reconfigured* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reconfigured::InternalSwap(Reconfigured* other) {
  using std::swap;
  swap(conf_, other->conf_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Reconfigured::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Reconfigured

// required .Configure conf = 1;
bool Reconfigured::has_conf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Reconfigured::set_has_conf() {
  _has_bits_[0] |= 0x00000001u;
}
void Reconfigured::clear_has_conf() {
  _has_bits_[0] &= ~0x00000001u;
}
void Reconfigured::clear_conf() {
  if (conf_ != NULL) conf_->::Configure::Clear();
  clear_has_conf();
}
const ::Configure& Reconfigured::conf() const {
  const ::Configure* p = conf_;
  // @@protoc_insertion_point(field_get:Reconfigured.conf)
  return p != NULL ? *p : *reinterpret_cast<const ::Configure*>(
      &::_Configure_default_instance_);
}
::Configure* Reconfigured::mutable_conf() {
  set_has_conf();
  if (conf_ == NULL) {
    conf_ = new ::Configure;
  }
  // @@protoc_insertion_point(field_mutable:Reconfigured.conf)
  return conf_;
}
::Configure* Reconfigured::release_conf() {
  // @@protoc_insertion_point(field_release:Reconfigured.conf)
  clear_has_conf();
  ::Configure* temp = conf_;
  conf_ = NULL;
  return temp;
}
void Reconfigured::set_allocated_conf(::Configure* conf) {
  delete conf_;
  conf_ = conf;
  if (conf) {
    set_has_conf();
  } else {
    clear_has_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:Reconfigured.conf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurrentGroup::kGidFieldNumber;
const int CurrentGroup::kReasonFieldNumber;
const int CurrentGroup::kGnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurrentGroup::CurrentGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CurrentGroup)
}
CurrentGroup::CurrentGroup(const CurrentGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  gname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gname()) {
    gname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gname_);
  }
  gid_ = from.gid_;
  // @@protoc_insertion_point(copy_constructor:CurrentGroup)
}

void CurrentGroup::SharedCtor() {
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gid_ = 0u;
}

CurrentGroup::~CurrentGroup() {
  // @@protoc_insertion_point(destructor:CurrentGroup)
  SharedDtor();
}

void CurrentGroup::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CurrentGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrentGroup::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CurrentGroup& CurrentGroup::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

CurrentGroup* CurrentGroup::New(::google::protobuf::Arena* arena) const {
  CurrentGroup* n = new CurrentGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CurrentGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:CurrentGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*reason_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!gname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gname_.UnsafeRawStringPointer())->clear();
    }
  }
  gid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CurrentGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CurrentGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_gid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CurrentGroup.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string gname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gname().data(), static_cast<int>(this->gname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CurrentGroup.gname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CurrentGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CurrentGroup)
  return false;
#undef DO_
}

void CurrentGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CurrentGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gid(), output);
  }

  // required string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CurrentGroup.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  // required string gname = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gname().data(), static_cast<int>(this->gname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CurrentGroup.gname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CurrentGroup)
}

::google::protobuf::uint8* CurrentGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CurrentGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gid(), target);
  }

  // required string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CurrentGroup.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  // required string gname = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gname().data(), static_cast<int>(this->gname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CurrentGroup.gname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CurrentGroup)
  return target;
}

size_t CurrentGroup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CurrentGroup)
  size_t total_size = 0;

  if (has_reason()) {
    // required string reason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  if (has_gname()) {
    // required string gname = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gname());
  }

  if (has_gid()) {
    // required uint32 gid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gid());
  }

  return total_size;
}
size_t CurrentGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CurrentGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string reason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());

    // required string gname = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gname());

    // required uint32 gid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrentGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CurrentGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrentGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CurrentGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CurrentGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CurrentGroup)
    MergeFrom(*source);
  }
}

void CurrentGroup::MergeFrom(const CurrentGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CurrentGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_gname();
      gname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gname_);
    }
    if (cached_has_bits & 0x00000004u) {
      gid_ = from.gid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CurrentGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CurrentGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentGroup::CopyFrom(const CurrentGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CurrentGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void CurrentGroup::Swap(CurrentGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurrentGroup::InternalSwap(CurrentGroup* other) {
  using std::swap;
  reason_.Swap(&other->reason_);
  gname_.Swap(&other->gname_);
  swap(gid_, other->gid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CurrentGroup::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CurrentGroup

// required uint32 gid = 1;
bool CurrentGroup::has_gid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CurrentGroup::set_has_gid() {
  _has_bits_[0] |= 0x00000004u;
}
void CurrentGroup::clear_has_gid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CurrentGroup::clear_gid() {
  gid_ = 0u;
  clear_has_gid();
}
::google::protobuf::uint32 CurrentGroup::gid() const {
  // @@protoc_insertion_point(field_get:CurrentGroup.gid)
  return gid_;
}
void CurrentGroup::set_gid(::google::protobuf::uint32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:CurrentGroup.gid)
}

// required string reason = 2;
bool CurrentGroup::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CurrentGroup::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void CurrentGroup::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void CurrentGroup::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
const ::std::string& CurrentGroup::reason() const {
  // @@protoc_insertion_point(field_get:CurrentGroup.reason)
  return reason_.GetNoArena();
}
void CurrentGroup::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CurrentGroup.reason)
}
#if LANG_CXX11
void CurrentGroup::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CurrentGroup.reason)
}
#endif
void CurrentGroup::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CurrentGroup.reason)
}
void CurrentGroup::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CurrentGroup.reason)
}
::std::string* CurrentGroup::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:CurrentGroup.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CurrentGroup::release_reason() {
  // @@protoc_insertion_point(field_release:CurrentGroup.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CurrentGroup::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:CurrentGroup.reason)
}

// required string gname = 3;
bool CurrentGroup::has_gname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CurrentGroup::set_has_gname() {
  _has_bits_[0] |= 0x00000002u;
}
void CurrentGroup::clear_has_gname() {
  _has_bits_[0] &= ~0x00000002u;
}
void CurrentGroup::clear_gname() {
  gname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gname();
}
const ::std::string& CurrentGroup::gname() const {
  // @@protoc_insertion_point(field_get:CurrentGroup.gname)
  return gname_.GetNoArena();
}
void CurrentGroup::set_gname(const ::std::string& value) {
  set_has_gname();
  gname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CurrentGroup.gname)
}
#if LANG_CXX11
void CurrentGroup::set_gname(::std::string&& value) {
  set_has_gname();
  gname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CurrentGroup.gname)
}
#endif
void CurrentGroup::set_gname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gname();
  gname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CurrentGroup.gname)
}
void CurrentGroup::set_gname(const char* value, size_t size) {
  set_has_gname();
  gname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CurrentGroup.gname)
}
::std::string* CurrentGroup::mutable_gname() {
  set_has_gname();
  // @@protoc_insertion_point(field_mutable:CurrentGroup.gname)
  return gname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CurrentGroup::release_gname() {
  // @@protoc_insertion_point(field_release:CurrentGroup.gname)
  clear_has_gname();
  return gname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CurrentGroup::set_allocated_gname(::std::string* gname) {
  if (gname != NULL) {
    set_has_gname();
  } else {
    clear_has_gname();
  }
  gname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gname);
  // @@protoc_insertion_point(field_set_allocated:CurrentGroup.gname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupListChanged::kUpdateGroupsFieldNumber;
const int GroupListChanged::kRmGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupListChanged::GroupListChanged()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupListChanged)
}
GroupListChanged::GroupListChanged(const GroupListChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      update_groups_(from.update_groups_),
      rm_groups_(from.rm_groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GroupListChanged)
}

void GroupListChanged::SharedCtor() {
  _cached_size_ = 0;
}

GroupListChanged::~GroupListChanged() {
  // @@protoc_insertion_point(destructor:GroupListChanged)
  SharedDtor();
}

void GroupListChanged::SharedDtor() {
}

void GroupListChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupListChanged::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GroupListChanged& GroupListChanged::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

GroupListChanged* GroupListChanged::New(::google::protobuf::Arena* arena) const {
  GroupListChanged* n = new GroupListChanged;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupListChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupListChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  update_groups_.Clear();
  rm_groups_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GroupListChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GroupListChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Group update_groups = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_update_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 rm_groups = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_rm_groups())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rm_groups())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GroupListChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GroupListChanged)
  return false;
#undef DO_
}

void GroupListChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GroupListChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Group update_groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->update_groups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->update_groups(static_cast<int>(i)), output);
  }

  // repeated uint32 rm_groups = 2;
  for (int i = 0, n = this->rm_groups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->rm_groups(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GroupListChanged)
}

::google::protobuf::uint8* GroupListChanged::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GroupListChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Group update_groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->update_groups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->update_groups(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 rm_groups = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->rm_groups_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupListChanged)
  return target;
}

size_t GroupListChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupListChanged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .Group update_groups = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->update_groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_groups(static_cast<int>(i)));
    }
  }

  // repeated uint32 rm_groups = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->rm_groups_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->rm_groups_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupListChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GroupListChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupListChanged* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupListChanged>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GroupListChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GroupListChanged)
    MergeFrom(*source);
  }
}

void GroupListChanged::MergeFrom(const GroupListChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GroupListChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  update_groups_.MergeFrom(from.update_groups_);
  rm_groups_.MergeFrom(from.rm_groups_);
}

void GroupListChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GroupListChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupListChanged::CopyFrom(const GroupListChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupListChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupListChanged::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->update_groups())) return false;
  return true;
}

void GroupListChanged::Swap(GroupListChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupListChanged::InternalSwap(GroupListChanged* other) {
  using std::swap;
  update_groups_.InternalSwap(&other->update_groups_);
  rm_groups_.InternalSwap(&other->rm_groups_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupListChanged::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupListChanged

// repeated .Group update_groups = 1;
int GroupListChanged::update_groups_size() const {
  return update_groups_.size();
}
void GroupListChanged::clear_update_groups() {
  update_groups_.Clear();
}
const ::Group& GroupListChanged::update_groups(int index) const {
  // @@protoc_insertion_point(field_get:GroupListChanged.update_groups)
  return update_groups_.Get(index);
}
::Group* GroupListChanged::mutable_update_groups(int index) {
  // @@protoc_insertion_point(field_mutable:GroupListChanged.update_groups)
  return update_groups_.Mutable(index);
}
::Group* GroupListChanged::add_update_groups() {
  // @@protoc_insertion_point(field_add:GroupListChanged.update_groups)
  return update_groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::Group >*
GroupListChanged::mutable_update_groups() {
  // @@protoc_insertion_point(field_mutable_list:GroupListChanged.update_groups)
  return &update_groups_;
}
const ::google::protobuf::RepeatedPtrField< ::Group >&
GroupListChanged::update_groups() const {
  // @@protoc_insertion_point(field_list:GroupListChanged.update_groups)
  return update_groups_;
}

// repeated uint32 rm_groups = 2;
int GroupListChanged::rm_groups_size() const {
  return rm_groups_.size();
}
void GroupListChanged::clear_rm_groups() {
  rm_groups_.Clear();
}
::google::protobuf::uint32 GroupListChanged::rm_groups(int index) const {
  // @@protoc_insertion_point(field_get:GroupListChanged.rm_groups)
  return rm_groups_.Get(index);
}
void GroupListChanged::set_rm_groups(int index, ::google::protobuf::uint32 value) {
  rm_groups_.Set(index, value);
  // @@protoc_insertion_point(field_set:GroupListChanged.rm_groups)
}
void GroupListChanged::add_rm_groups(::google::protobuf::uint32 value) {
  rm_groups_.Add(value);
  // @@protoc_insertion_point(field_add:GroupListChanged.rm_groups)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GroupListChanged::rm_groups() const {
  // @@protoc_insertion_point(field_list:GroupListChanged.rm_groups)
  return rm_groups_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GroupListChanged::mutable_rm_groups() {
  // @@protoc_insertion_point(field_mutable_list:GroupListChanged.rm_groups)
  return &rm_groups_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemberGetMic::kGidFieldNumber;
const int MemberGetMic::kUidFieldNumber;
const int MemberGetMic::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemberGetMic::MemberGetMic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MemberGetMic)
}
MemberGetMic::MemberGetMic(const MemberGetMic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&gid_, &from.gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&gid_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:MemberGetMic)
}

void MemberGetMic::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&gid_)) + sizeof(uid_));
}

MemberGetMic::~MemberGetMic() {
  // @@protoc_insertion_point(destructor:MemberGetMic)
  SharedDtor();
}

void MemberGetMic::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MemberGetMic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberGetMic::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MemberGetMic& MemberGetMic::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemberGetMic* MemberGetMic::New(::google::protobuf::Arena* arena) const {
  MemberGetMic* n = new MemberGetMic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemberGetMic::Clear() {
// @@protoc_insertion_point(message_clear_start:MemberGetMic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uid_) -
        reinterpret_cast<char*>(&gid_)) + sizeof(uid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MemberGetMic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MemberGetMic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_gid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MemberGetMic.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MemberGetMic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MemberGetMic)
  return false;
#undef DO_
}

void MemberGetMic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MemberGetMic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gid(), output);
  }

  // required uint32 uid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MemberGetMic.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MemberGetMic)
}

::google::protobuf::uint8* MemberGetMic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MemberGetMic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gid(), target);
  }

  // required uint32 uid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MemberGetMic.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MemberGetMic)
  return target;
}

size_t MemberGetMic::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MemberGetMic)
  size_t total_size = 0;

  if (has_gid()) {
    // required uint32 gid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gid());
  }

  if (has_uid()) {
    // required uint32 uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  return total_size;
}
size_t MemberGetMic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MemberGetMic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 gid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gid());

    // required uint32 uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string name = 3;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberGetMic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MemberGetMic)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberGetMic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemberGetMic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MemberGetMic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MemberGetMic)
    MergeFrom(*source);
  }
}

void MemberGetMic::MergeFrom(const MemberGetMic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MemberGetMic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      gid_ = from.gid_;
    }
    if (cached_has_bits & 0x00000004u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemberGetMic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MemberGetMic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberGetMic::CopyFrom(const MemberGetMic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MemberGetMic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberGetMic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void MemberGetMic::Swap(MemberGetMic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemberGetMic::InternalSwap(MemberGetMic* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(gid_, other->gid_);
  swap(uid_, other->uid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemberGetMic::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemberGetMic

// required uint32 gid = 1;
bool MemberGetMic::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MemberGetMic::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
void MemberGetMic::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
void MemberGetMic::clear_gid() {
  gid_ = 0u;
  clear_has_gid();
}
::google::protobuf::uint32 MemberGetMic::gid() const {
  // @@protoc_insertion_point(field_get:MemberGetMic.gid)
  return gid_;
}
void MemberGetMic::set_gid(::google::protobuf::uint32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:MemberGetMic.gid)
}

// required uint32 uid = 2;
bool MemberGetMic::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MemberGetMic::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
void MemberGetMic::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
void MemberGetMic::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 MemberGetMic::uid() const {
  // @@protoc_insertion_point(field_get:MemberGetMic.uid)
  return uid_;
}
void MemberGetMic::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:MemberGetMic.uid)
}

// optional string name = 3;
bool MemberGetMic::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MemberGetMic::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MemberGetMic::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MemberGetMic::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& MemberGetMic::name() const {
  // @@protoc_insertion_point(field_get:MemberGetMic.name)
  return name_.GetNoArena();
}
void MemberGetMic::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MemberGetMic.name)
}
#if LANG_CXX11
void MemberGetMic::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MemberGetMic.name)
}
#endif
void MemberGetMic::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MemberGetMic.name)
}
void MemberGetMic::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MemberGetMic.name)
}
::std::string* MemberGetMic::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:MemberGetMic.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MemberGetMic::release_name() {
  // @@protoc_insertion_point(field_release:MemberGetMic.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MemberGetMic::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MemberGetMic.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemberLostMic::kGidFieldNumber;
const int MemberLostMic::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemberLostMic::MemberLostMic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ptt_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MemberLostMic)
}
MemberLostMic::MemberLostMic(const MemberLostMic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gid_, &from.gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&gid_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:MemberLostMic)
}

void MemberLostMic::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&gid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&gid_)) + sizeof(uid_));
}

MemberLostMic::~MemberLostMic() {
  // @@protoc_insertion_point(destructor:MemberLostMic)
  SharedDtor();
}

void MemberLostMic::SharedDtor() {
}

void MemberLostMic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberLostMic::descriptor() {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MemberLostMic& MemberLostMic::default_instance() {
  protobuf_ptt_2eproto::InitDefaults();
  return *internal_default_instance();
}

MemberLostMic* MemberLostMic::New(::google::protobuf::Arena* arena) const {
  MemberLostMic* n = new MemberLostMic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemberLostMic::Clear() {
// @@protoc_insertion_point(message_clear_start:MemberLostMic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uid_) -
        reinterpret_cast<char*>(&gid_)) + sizeof(uid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MemberLostMic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MemberLostMic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_gid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MemberLostMic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MemberLostMic)
  return false;
#undef DO_
}

void MemberLostMic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MemberLostMic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gid(), output);
  }

  // required uint32 uid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MemberLostMic)
}

::google::protobuf::uint8* MemberLostMic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MemberLostMic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gid(), target);
  }

  // required uint32 uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MemberLostMic)
  return target;
}

size_t MemberLostMic::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MemberLostMic)
  size_t total_size = 0;

  if (has_gid()) {
    // required uint32 gid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gid());
  }

  if (has_uid()) {
    // required uint32 uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  return total_size;
}
size_t MemberLostMic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MemberLostMic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 gid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gid());

    // required uint32 uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberLostMic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MemberLostMic)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberLostMic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemberLostMic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MemberLostMic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MemberLostMic)
    MergeFrom(*source);
  }
}

void MemberLostMic::MergeFrom(const MemberLostMic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MemberLostMic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      gid_ = from.gid_;
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemberLostMic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MemberLostMic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberLostMic::CopyFrom(const MemberLostMic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MemberLostMic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberLostMic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MemberLostMic::Swap(MemberLostMic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemberLostMic::InternalSwap(MemberLostMic* other) {
  using std::swap;
  swap(gid_, other->gid_);
  swap(uid_, other->uid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemberLostMic::GetMetadata() const {
  protobuf_ptt_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ptt_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemberLostMic

// required uint32 gid = 1;
bool MemberLostMic::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MemberLostMic::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
void MemberLostMic::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
void MemberLostMic::clear_gid() {
  gid_ = 0u;
  clear_has_gid();
}
::google::protobuf::uint32 MemberLostMic::gid() const {
  // @@protoc_insertion_point(field_get:MemberLostMic.gid)
  return gid_;
}
void MemberLostMic::set_gid(::google::protobuf::uint32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:MemberLostMic.gid)
}

// required uint32 uid = 2;
bool MemberLostMic::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MemberLostMic::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
void MemberLostMic::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
void MemberLostMic::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
::google::protobuf::uint32 MemberLostMic::uid() const {
  // @@protoc_insertion_point(field_get:MemberLostMic.uid)
  return uid_;
}
void MemberLostMic::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:MemberLostMic.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
